package com.mingcloud.proxy.logiclayer.cheryhandler;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.HumanMapper;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.UsersMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.HumanDto;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.UsersDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.UsersEntity;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.MD5Util;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.log4j.Logger;

import java.util.Date;

/**
 * 奇瑞用户导入线程
 */
public class CheryUserDataOutThread implements Runnable {
    private static Logger logger = Logger.getLogger(CheryUserDataOutThread.class);

    private JdbcChange jdbcChange = JdbcChange.getJdbcChange();

    private DataCenter dataCenter = DataCenter.getInstance();

    private UsersMapper usersMapper = SpringContextUtil.getBean("usersMapper");

    private HumanMapper humanMapper = SpringContextUtil.getBean("humanMapper");

    @Override
    public void run() {
        logger.info("CheryUserDataOutThread begin");
        jdbcChange.changeJdbc(JdbcChange.mySqlDataSource);
        while(true) {
            try {
                if(dataCenter.getUserslistSize() > 0) {
                    InsertUsers();
                }
                Thread.sleep(50);
            } catch(Exception e) {
                logger.error("CheryUserDataOutThread: " + e);
            }
        }
    }

    private void InsertUsers() {
        try {
            UsersDto dto = dataCenter.popUserslist();
            UsersEntity entity = new UsersEntity();
            entity.setUserkey(dto.getUserkey());
            UsersEntity usersEntity = usersMapper.get(entity);
            entity.setUsername(dto.getUsername());
            HumanDto humanDto = humanMapper.getByHumanKey(dto.getWorkSupplierKey());
            if(null != humanDto){
                entity.setHumanid(humanDto.getId());
            }

            Date date = new Date();
            if (null != usersEntity) {
                entity.setId(usersEntity.getId());
                entity.setModificationdate(date);
                usersMapper.update(entity);
                logger.info("CheryUserDataOutThread update succeeded...");
            } else {
                entity.setStatus(1);
                entity.setCreatedate(date);
                entity.setModificationdate(date);
                entity.setTombstone(1);
                entity.setPassword(MD5Util.MD5Encryption("8888"));
                usersMapper.insert(entity);
                logger.info("CheryUserDataOutThread insert succeeded...");
            }

        } catch (Exception e) {
            logger.error("CheryUserDataOutThread InsertUsers: " + e);
        }
    }

}

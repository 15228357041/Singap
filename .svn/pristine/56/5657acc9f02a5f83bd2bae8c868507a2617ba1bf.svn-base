package com.mingcloud.proxy.logiclayer.cheryhandler;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.PositionMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.PositionDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.PositionEntity;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.log4j.Logger;

import java.util.Date;

public class CheryPositionDataOutThread implements Runnable{
    private static Logger logger = Logger.getLogger(CheryPositionDataOutThread.class);

    private JdbcChange jdbcChange = JdbcChange.getJdbcChange();

    private DataCenter dataCenter = DataCenter.getInstance();

    private PositionMapper positionMapper = SpringContextUtil.getBean("positionMapper");

    public CheryPositionDataOutThread() {
        // 设置数据源为MySql
        jdbcChange.changeJdbc(JdbcChange.mySqlDataSource);
    }

    @Override
    public void run() {
        logger.info("CheryPositionDataOutThread begin");

        while(true) {
            try {
                if(dataCenter.getPositionlistSize() > 0) {
                    InsertPosition();
                    logger.info("PositionDataCenter Size:" + (dataCenter.getPositionlistSize()-1));
                }
                Thread.sleep(50);
            } catch(Exception e) {
                logger.error("CheryPositionDataOutThread: " + e);
            }
        }
    }

    private void InsertPosition() {
        try {
            PositionDto dto = dataCenter.popPositionlist();
            PositionEntity entity = new PositionEntity();
            entity.setPoskey(dto.getPoskey());
            PositionEntity oldEntity = positionMapper.selectByPosKey(dto.getPoskey());

            PositionEntity groupEntity = null;
            if (dto.getExtravarchar1() != null && !dto.getExtravarchar1().equals("")) {
                PositionEntity gentity = new PositionEntity();
                gentity.setPoskey(dto.getExtravarchar1());
                groupEntity = positionMapper.get(gentity);
            }

            Date date = new Date();
            if(oldEntity != null && !oldEntity.equals("")) {
                entity.setId(oldEntity.getId());
                entity.setPosname(dto.getPosname());
                entity.setModificationdate(date);
                if (groupEntity != null && !groupEntity.equals("")) {
                    entity.setRootposid(groupEntity.getId());
                }
                positionMapper.update(entity);
                logger.info("CheryPositionDataOutThread update succeeded...");
            } else {
                if (groupEntity != null && !groupEntity.equals("")) {
                    entity.setRootposid(groupEntity.getId());
                }
                entity.setPosname(dto.getPosname());
                entity.setCreatedate(date);
                positionMapper.insert(entity);
                logger.info("CheryPositionDataOutThread insert succeeded...");
            }
        } catch(Exception e) {
            logger.error("CheryPositionDataOutThread InsertPosition: " + e);
        }
    }
}

package com.mingcloud.proxy.logiclayer.purchaserehandler;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.PurchaserequestheaderMapper;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.PurchaserequestlineMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.POpodetailsDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.PurchaserequestheaderEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.PurchaserequestlineEntity;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.SpringContextUtil;

public class PurchasereDataOutThread implements Runnable {

	private static Logger logger = Logger.getLogger(PurchasereDataInThread.class);

	private JdbcChange jdbcChange = JdbcChange.getJdbcChange();

	private DataCenter dataCenter = DataCenter.getInstance();
	
	private PurchaserequestheaderMapper purchaserequestheaderMapper = SpringContextUtil.getBean("purchaserequestheaderMapper");
	private PurchaserequestlineMapper purchaserequestlineMapper = SpringContextUtil.getBean("purchaserequestlineMapper");
	
	private static int popodetailslistSize = 0;
	
	public PurchasereDataOutThread() {
		// TODO Auto-generated constructor stub
		// 设置数据源为MySql
		jdbcChange.changeJdbc(JdbcChange.mySqlDataSource);
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		logger.info("PurchasereDataOutThread begin");
		
		while (true) {
			try {
				if (dataCenter.getPOpodetailslistSize() > 0) {
					popodetailslistSize = dataCenter.getPOpodetailslistSize();
					InsertPurchasere();
					logger.info("PurchasereDataCenter Size: " + (popodetailslistSize-1));
				}
				Thread.sleep(10);
			} catch(Exception e) {
				logger.error("PurchasereDataOutThread: " + e);
			}
		}
	}

	private void InsertPurchasere() {
		// TODO Auto-generated method stub
		try {
			POpodetailsDto pOpodetailsDto = dataCenter.popPOpodetailslist();
			PurchaserequestheaderEntity purchaserequestheaderEntity = new PurchaserequestheaderEntity();
			purchaserequestheaderEntity.setStatus(pOpodetailsDto.getIverifystateex());
			purchaserequestheaderEntity.setPurchaserequestkey(pOpodetailsDto.getCappcode());
			Date date = new Date();
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("spkey", pOpodetailsDto.getCinvcode());
			map.put("createdate", date);
			PurchaserequestheaderEntity entity = purchaserequestheaderMapper.checkHeader(purchaserequestheaderEntity);
			if (entity != null) {
				map.put("purchaserequestid", entity.getId());
				if (entity.getStatus() != purchaserequestheaderEntity.getStatus()) {
					purchaserequestheaderEntity.setId(entity.getId());
					purchaserequestheaderMapper.update(purchaserequestheaderEntity);
					logger.info("Purchaserequestheader update succeeded...");
				}
			} else if (purchaserequestheaderEntity.getPurchaserequestkey() != null) {
				purchaserequestheaderEntity.setCreatedate(date);
				purchaserequestheaderMapper.insert(purchaserequestheaderEntity);
				map.put("purchaserequestid", purchaserequestheaderEntity.getId());
				logger.info("Purchaserequestheader insert succeeded...");
			}
			PurchaserequestlineEntity purchaserequestlineEntity = new PurchaserequestlineEntity();
			purchaserequestlineEntity = purchaserequestlineMapper.checkLine(map);
			if (purchaserequestlineEntity == null && map.get("purchaserequestid") != null) {
				purchaserequestlineMapper.insertLine(map);
				logger.info("Purchaserequestline insert succeeded...");
			}
			
		} catch (Exception e) {
			logger.error("PurchasereDataOutThread InsertPurchasere: " + e);
		}
	}

}

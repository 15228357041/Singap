package com.mingcloud.proxy.logiclayer.instrumenthandler;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.InstrumentMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.InstrumentDto;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.log4j.Logger;

import java.util.Date;

public class InstrumentDataOutThread implements Runnable{

    private static Logger logger = Logger.getLogger(InstrumentDataOutThread.class);

    private JdbcChange jdbcChange = JdbcChange.getJdbcChange();

    private DataCenter dataCenter = DataCenter.getInstance();

    private InstrumentMapper instrumentMapper = SpringContextUtil.getBean("instrumentMapper");

    @Override
    public void run() {

        logger.info("InstrumentDataOutThread begin ...");
        //切换到Mysql数据源
        jdbcChange.changeJdbc(JdbcChange.mySqlDataSource);
        logger.info("InstrumentDataOutThread change to mySqlDataSource");

        while (true) {
            try {
                if (dataCenter.getInstrumentListSize() > 0) {
                    insertInstrument();
                }
                Thread.sleep(50);
            } catch (Exception e) {
                logger.error("InstrumentDataOutThread : " + e);
            }
        }

    }

    private void insertInstrument(){
        InstrumentDto dto = dataCenter.popInstrumentList();

        InstrumentDto oldDto = instrumentMapper.selectByInstrumentKey(dto.getInstrumentkey());

        InstrumentDto newDto = new InstrumentDto();
        newDto.setInstrumentkey(dto.getInstrumentkey());
        newDto.setInstrumentname(dto.getInstrumentname());

        Date date = new Date();
        if(null != oldDto){
            newDto.setModificationdate(date);
            newDto.setId(oldDto.getId());
            instrumentMapper.update(newDto);
            logger.info("InstrumentDataOutThread update success");
        } else {
            newDto.setCreatedate(date);
            instrumentMapper.insert(newDto);
            logger.info("InstrumentDataOutThread insert success");
        }
    }
}

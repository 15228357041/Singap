package com.mingcloud.proxy.logiclayer.huaweihandler;

import java.util.Date;

import org.apache.log4j.Logger;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.UsergroupMapper;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.UsersMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.UsergroupDto;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.UsersDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.UsergroupEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.UsersEntity;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.SpringContextUtil;

public class UsersDataOutThread implements Runnable {
	private static Logger logger = Logger.getLogger(UsersDataOutThread.class);
	
	private JdbcChange jdbcChange = JdbcChange.getJdbcChange();
	
	private DataCenter dataCenter = DataCenter.getInstance();
	
	private UsergroupMapper usergroupMapper = SpringContextUtil.getBean("usergroupMapper");
	private UsersMapper usersMapper = SpringContextUtil.getBean("usersMapper");
	
	private static Integer userslistSize, usergrouplistSize;
	
	public UsersDataOutThread() {
		// TODO Auto-generated constructor stub
		// 设置数据源为MySql
		jdbcChange.changeJdbc(JdbcChange.mySqlDataSource);
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		logger.info("UsersDataOutThread begin");
		
		while(true) {
			try {
				if(dataCenter.getUsergrouplistSize() > 0) {
					usergrouplistSize = dataCenter.getUsergrouplistSize();
					InsertUsergroup();
					logger.info("UsergroupDataOutThread Size:" + (usergrouplistSize-1));
				}
				if(dataCenter.getUserslistSize() > 0) {
					userslistSize = dataCenter.getUserslistSize();
					InsertUsers();
					logger.info("UsersDataOutThread Size:" + (userslistSize-1));
				}
				Thread.sleep(50);
			} catch(Exception e) {
				logger.error("UsersDataOutThread: " + e);
			}
		}
	}

	private void InsertUsergroup() {
		// TODO Auto-generated method stub
		try {
			UsergroupDto dto = dataCenter.popUsergrouplist();
			UsergroupEntity entity = new UsergroupEntity();
			entity.setUsergroupkey(dto.getUsergroupkey());
			
			UsergroupEntity usergroupEntity = usergroupMapper.get(entity);
			entity.setUsergroupname(dto.getUsergroupname());
			
			Date date = new Date();
			if (usergroupEntity != null && !usergroupEntity.equals("")) {
				entity.setId(usergroupEntity.getId());
				entity.setModificationdate(date);
				entity.setTombstone(1);
				entity.setRootusergroupid(0);
				
				usergroupMapper.update(entity);
				logger.info("UsergroupDataOutThread update succeeded...");
			} else {
				entity.setCreatedate(date);
				entity.setModificationdate(date);
				entity.setTombstone(1);
				entity.setRootusergroupid(0);
				
				usergroupMapper.insert(entity);
				logger.info("UsergroupDataOutThread insert succeeded...");
			}
		} catch (Exception e) {
			logger.error("UsergroupDataOutThread InsertUsergroup: " + e);
		}
	}

	private void InsertUsers() {
		// TODO Auto-generated method stub
		try {
			UsersDto dto = dataCenter.popUserslist();
			UsersEntity entity = new UsersEntity();
			entity.setUserkey(dto.getUserkey());
			UsersEntity usersEntity = usersMapper.get(entity);
			
			UsergroupEntity usergroupEntity = new UsergroupEntity();
			usergroupEntity.setUsergroupkey(dto.getExtravarchar1());
			UsergroupEntity groupEntity = usergroupMapper.get(usergroupEntity);
			
			if (groupEntity != null && !groupEntity.equals("")) {
				entity.setUsergroupid(groupEntity.getId());
			}
			
			entity.setUsername(dto.getUsername());
//			entity.setPassword(dto.getPassword());
			entity.setEmail(dto.getEmail());
			
			Date date = new Date();
			if (usersEntity != null && !usersEntity.equals("")) {
				entity.setModificationdate(date);
				
				usersMapper.update(entity);
				logger.info("UsersDataOutThread update succeeded...");
			} else {
				entity.setStatus(1);
				entity.setCreatedate(date);
				entity.setModificationdate(date);
				
				usersMapper.insert(entity);
				logger.info("UsersDataOutThread insert succeeded...");
			}
			
		} catch (Exception e) {
			logger.error("UsersDataOutThread InsertUsers: " + e);
		}
	}

}

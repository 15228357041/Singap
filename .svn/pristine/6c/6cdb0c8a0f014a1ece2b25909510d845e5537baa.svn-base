package com.mingcloud.proxy.logiclayer.cheryhandler;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.MaintenanceobjectMapper;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.PositionMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.MaintenanceobjectDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.MaintenanceobjectEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.PositionEntity;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.log4j.Logger;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheryMaintenanceDataOutThread implements Runnable {
    private static Logger logger = Logger.getLogger(CheryMaintenanceDataOutThread.class);

    private JdbcChange jdbcChange = JdbcChange.getJdbcChange();

    private DataCenter dataCenter = DataCenter.getInstance();

    private MaintenanceobjectMapper maintenanceobjectMapper = SpringContextUtil.getBean("maintenanceobjectMapper");

    private PositionMapper positionMapper = SpringContextUtil.getBean("positionMapper");

    private Map<String, Integer> positionKeyIdMap = new HashMap<String, Integer>();

    public CheryMaintenanceDataOutThread(){
        jdbcChange.changeJdbc(JdbcChange.mySqlDataSource);
        positionKeyIdMap = getPositionKeyIdMap();
    }

    @Override
    public void run() {
        // TODO Auto-generated method stub
        logger.info("CheryMaintenanceDataOutThread begin");

        while(true) {
            try {
                if(dataCenter.getMaintenancelistSize() > 0) {
                    InsertMaintenanceobject();
                    logger.info("MaintenanceDataCenter Size:" + (dataCenter.getMesRecordListSize() - 1));
                }
                Thread.sleep(50);
            } catch(Exception e) {
                logger.error("CheryMaintenanceDataOutThread: " + e);
            }
        }
    }

    private void InsertMaintenanceobject() {
        try {
            MaintenanceobjectDto dto = dataCenter.popMaintenancelist();
            MaintenanceobjectEntity entity = new MaintenanceobjectEntity();
            entity.setMokey(dto.getMokey());
            //查询该设备数据库中是否存在
            MaintenanceobjectEntity oldEntity = maintenanceobjectMapper.get(entity);
            entity.setPosid(positionKeyIdMap.get(dto.getExtravarchar1()));
            Date date = new Date();

            if(null != oldEntity) {
                entity.setMoname(dto.getMoname());
                entity.setModificationdate(date);
                entity.setId(oldEntity.getId());
                maintenanceobjectMapper.update(entity);
                logger.info("CheryMaintenanceDataOutThread update succeeded...");
            } else {
                entity.setMoname(dto.getMoname());
                entity.setCreatedate(date);
                maintenanceobjectMapper.insert(entity);
                logger.info("CheryMaintenanceDataOutThread insert succeeded...");
            }
        } catch(Exception e) {
            logger.error("CheryMaintenanceDataOutThread InsertMaintenanceobject: " + e);
        }
    }

    private Map<String, Integer> getPositionKeyIdMap(){
        //获取所有位置的Key和id
        List<PositionEntity> positions = positionMapper.selectKeyIdMap();
        Map<String, Integer> positionKeyIdMap = new HashMap<String, Integer>();
        if(null != positions && positions.size() > 0){
            for (PositionEntity entity : positions) {
                positionKeyIdMap.put(entity.getPoskey(), entity.getId());
            }
        }
        return positionKeyIdMap;
    };

}

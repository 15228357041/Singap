package com.mingcloud.proxy.logiclayer.vcom_dayhander;

import com.alibaba.fastjson.JSONException;
import com.mingcloud.proxy.common.CommonRecordTypeEnum;
import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datacenter.PositionData;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.PositionMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.StatisticsdaliyDto;
import com.mingcloud.proxy.datalayer.dto.vcomapi.VcomApiDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.PositionEntity;
import com.mingcloud.proxy.util.DateHelper;
import com.mingcloud.proxy.util.HttpRequestUtil;
import com.mingcloud.proxy.util.JsonParser;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.log4j.Logger;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import java.io.FileNotFoundException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class VcomDayDataInThread implements Runnable {
	private static Logger logger = Logger.getLogger(VcomDayDataInThread.class);
	private PositionMapper positionMapper = SpringContextUtil.getBean("positionMapper");
	private DataCenter dataCenter = DataCenter.getInstance();
	
	private static PositionData positionData = PositionData.getInstance();
	
	private String VcomRootURL;
	private String Authorization;
	private String X_API_KEY;


	public VcomDayDataInThread() {
		VcomRootURL = "https://api.meteocontrol.cn/";
		Authorization = "Basic YXBpLm9tOmFwaS5vbS0yMDE3";
		X_API_KEY = "404b228d8ceb308abdd6fd277a1e3051";

		/*	VcomRootURL = "https://api.meteocontrol.cn/";
		Authorization = "Basic YXBpLm9tOmFwaS5vbS0yMDE3";
		X_API_KEY = "d1346bd11fb993054751a1671c3bcaf4";*/
	}

	public void run() {
		while (true) {
			try {
			if (dataCenter.getCommonrecodeexlistSize() < DataCenter.COMMONRECORDEXLIST_MAX_LENGTH) {
					logger.info("VcomDayDataInThread running...");
					GetAllPositionData();
					logger.info("VcomDayDataInThread wait for 30 minutes...");
					Thread.sleep(15 * 60 * 1000);
				} else {
					logger.info("VcomDayDataInThread wait for 10 minutes...");
					Thread.sleep(10 * 60 * 1000);
				}
			} catch (InterruptedException e) {
				logger.error("VcomDayDataInThread xyc: " + e.getStackTrace());
			}
        }
	}

	// 获取所有厂站的Vcom数据
	private void GetAllPositionData() {
		positionData.resetPositionList();
		List<PositionEntity> list = positionData.getPositionList();
		if (list != null && !list.isEmpty()) {
			for (PositionEntity curentity : list) {
				Integer id = curentity.getId();
				String systemkey = curentity.getExtravarchar32();
				Integer orgid = curentity.getOrgid();

				Date date = new Date();
				
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				String Startdate = df.format(date);
				
				Calendar cal = Calendar.getInstance();
				cal.setTime(date);
				cal.add(Calendar.DATE, 1);
				
				String Enddate = df.format(cal.getTime());
				try {
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.PR, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.VFG, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.GM, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.EN, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.EVU, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.PAC, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.HM0, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.EFFsys, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.TM0, Startdate, Enddate, orgid);
					GetVcomApiPositionData(id, systemkey, null,
							CommonRecordTypeEnum.EVUsim, Startdate, Enddate, orgid);
				} catch (Exception e) {
					logger.warn("VcomDayDataInThread.GetAllPositionData(): " + e.getStackTrace());
					e.printStackTrace();
				}
				
				try {
					Thread.sleep(50);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
	
	// 按厂站、类型、时间区间查询Vcom数据
	private void GetVcomApiPositionData(Integer id, String systemkey, String moId, CommonRecordTypeEnum datatype, String Startdate,
			String Enddate, Integer orgid) throws FileNotFoundException {
		
		
		List<VcomApiDto> listDto = GetVcomApiData(id, systemkey, moId, datatype, Startdate, Enddate, orgid);

		if (listDto == null) {
			return;
		}
		PositionEntity positionEntity = new PositionEntity();
		positionEntity.setExtravarchar32(systemkey);
		List<PositionEntity> entityList = positionMapper.select(positionEntity);
		if (entityList == null || entityList.size() == 0) {
			return;
		}
		PositionEntity posEntity = entityList.get(0);
		for (VcomApiDto dto : listDto) {
			BigDecimal value = dto.getValue();
			if(value != null) {
				StatisticsdaliyDto curdto = new StatisticsdaliyDto();
				// 设置id
				curdto.setExtraid1(id);

				Calendar cal = Calendar.getInstance();
				cal.setTime(dto.getTimestamp());
				//posotion表
				curdto.setPoskey(posEntity.getPoskey());
				curdto.setPosabname(posEntity.getExtravarchar13());
				curdto.setPosname(posEntity.getPosname());
				curdto.setExtradecimal2(posEntity.getExtradecimal1());
				curdto.setExtradecimal3(posEntity.getExtradecimal2());
				curdto.setExtradecimal4(posEntity.getExtradecimal3());

				//获取的场站数据
				curdto.setExtradatetime1(cal.getTime());
				curdto.setExtradecimal1(dto.getValue());
				curdto.setNtype(datatype.getCommonRecordType());
		        curdto.setExtravarchar2(moId);
		        curdto.setOrgid(orgid);
				DataCenter.getInstance().pushVcomDaylist(curdto);
				logger.info(curdto.toString());
			}
		}
	}
	
	private List<VcomApiDto> GetVcomApiData(Integer id, String systemkey, String moId, CommonRecordTypeEnum datatype, String Startdate,
			String Enddate, Integer orgid) throws FileNotFoundException {
		String URL = getURL(systemkey, moId, datatype);

		Map<String, String> param = new HashMap<String, String>();
		param.put("from", Startdate + "T00%3A00%3A00%2B08%3A00");
		param.put("to", Startdate + "T23%3A59%3A59%2B08%3A00");
		param.put("resolution", datatype.getCommonRecordUrlElement2());

		Map<String, String> healderparam = new HashMap<String, String>();
		healderparam.put("Authorization", Authorization);
		healderparam.put("X-API-KEY", X_API_KEY);

		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		try {
			trustAllHttpsCertificates();
		} catch (Exception e) {
			e.printStackTrace();
		}
		HttpsURLConnection.setDefaultHostnameVerifier(hv);
		String apidata = HttpRequestUtil.httpsend(URL, param, healderparam);

		//logger.info(apidata);

		if (apidata.equals("") || apidata == null)
			return null;

		String jsonstr = null;
		if (datatype.getCommonRecordType() < 14){
			jsonstr = apidata.substring(8, apidata.length() - 1);
		} else {
			int start = apidata.indexOf('[');
			int end = apidata.indexOf(']');
			jsonstr = apidata.substring(start, end +1);
		}
		
		List<VcomApiDto> listDto = null;
		try {
			listDto = JsonParser.parseJsonArray(jsonstr, VcomApiDto.class);
		} catch (JSONException e) {
			logger.error("Failed to parse VcomData to Json array: " + e + "  ApiData: " + apidata);
		}
		return listDto;
	}
	
	public String getURL(String systemkey, String moId, CommonRecordTypeEnum datatype) {
		String URL = null;
		if(moId == null){
			URL = VcomRootURL + "systems/" + systemkey + datatype.getCommonRecordUrlElement1();
		} else {
			URL = VcomRootURL + "systems/" + systemkey + "/inverters/" + moId + datatype.getCommonRecordUrlElement1();
		}
		return URL;
	}
	HostnameVerifier hv = new HostnameVerifier() {
		public boolean verify(String urlHostName, SSLSession session) {
			System.out.println("Warning: URL Host: " + urlHostName + " vs. "
					+ session.getPeerHost());
			return true;
		}
	};
	private static void trustAllHttpsCertificates() throws Exception {
		javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[1];
		javax.net.ssl.TrustManager tm = new miTM();
		trustAllCerts[0] = tm;
		javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext
				.getInstance("SSL");
		sc.init(null, trustAllCerts, null);
		javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc
				.getSocketFactory());
	}

	public static class miTM implements javax.net.ssl.TrustManager,
			javax.net.ssl.X509TrustManager {
		public java.security.cert.X509Certificate[] getAcceptedIssuers() {
			return null;
		}

		public boolean isServerTrusted(
				java.security.cert.X509Certificate[] certs) {
			return true;
		}

		public boolean isClientTrusted(
				java.security.cert.X509Certificate[] certs) {
			return true;
		}

		public void checkServerTrusted(
				java.security.cert.X509Certificate[] certs, String authType)
				throws java.security.cert.CertificateException {
			return;
		}

		public void checkClientTrusted(
				java.security.cert.X509Certificate[] certs, String authType)
				throws java.security.cert.CertificateException {
			return;
		}
	}


}

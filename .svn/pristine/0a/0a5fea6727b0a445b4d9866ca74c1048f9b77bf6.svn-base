package com.mingcloud.proxy.common;


import com.mingcloud.proxy.datalayer.dao.archiveinfo.*;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.SparepartDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.OrganizationEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.SparepartEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.StockEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.StockcontrolEntity;
import com.mingcloud.proxy.datalayer.entity.geelyasp.UpdateStockRecordEntity;
import com.mingcloud.proxy.util.SpringContextUtil;
import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoTable;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class SAPDateCenter {
    private static SparepartMapper sparepartMapper = SpringContextUtil.getBean("sparepartMapper");
    private static StockMapper stockMapper = SpringContextUtil.getBean("stockMapper");
    private static StockcontrolMapper stockcontrolMapper = SpringContextUtil.getBean("stockcontrolMapper");
    private static OrganizationMapper organizationMapper = SpringContextUtil.getBean("organizationMapper");
    private static Logger logger = Logger.getLogger(SAPDateCenter.class);
    private static UpdateStockRecordMapper updateStockRecordMapper = SpringContextUtil.getBean("updateStockRecordMapper");

    public static List<SparepartDto>  getSPDateFromSAP(){
        JCoFunction function = null;
        JCoDestination destination = SAPConn.connect();
        List<SparepartDto> newList = new ArrayList();
        try {
            //查询所有待执行的同步任务
            UpdateStockRecordEntity entity = new UpdateStockRecordEntity();
            entity.setStatus(0);
            List<UpdateStockRecordEntity> entityList = updateStockRecordMapper.select(entity);
            //循环处理同步任务
            for (UpdateStockRecordEntity obj : entityList){
                //调用备件函数
                function = destination.getRepository().getFunction("ZDLMM_01_GAP_NBFLKC");
                function.getImportParameterList().setValue("WERKS", obj.getOrganizationkey());
                if (StringUtils.isNotBlank(obj.getStockkey())){
                    function.getImportParameterList().setValue("LGORT", obj.getStockkey());
                }
                if (StringUtils.isNotBlank(obj.getStockkey())){
                    function.getImportParameterList().setValue("MATNR", obj.getSparepartkey());
                }
                function.execute(destination);
                JCoParameterList exportTable= function.getTableParameterList();
                // 这是调用后 RFC 返回的表名
                JCoTable getTable = exportTable.getTable("GT_OUT");
                getTable.firstRow();
                boolean loopFlag = !getTable.isEmpty();
                while(loopFlag){
                    SparepartEntity sparepartEntity = new SparepartEntity();
                    //根据表字段来获取值
                    String BUKRS = getTable.getString("BUKRS");//公司代码
                    String EKORG = getTable.getString("EKORG");//采购组织
                    String WERKS = getTable.getString("WERKS");//工厂
                    String EKGRP = getTable.getString("EKGRP");//采购组
                    String MATNR = getTable.getString("MATNR");//物料号
                    String MAKTX = getTable.getString("MAKTX");//物料描述（短文本）
                    String VDATU = getTable.getString("VDATU");//配额分配生效期
                    String BDATU = getTable.getString("BDATU");//配额分配有效期截止于
                    String QUPOS = getTable.getString("QUPOS");//配额协议项目
                    String BESKZ = getTable.getString("BESKZ");//采购类型
                    String SOBES = getTable.getString("SOBES");//特别采购类型
                    String LIFNR = getTable.getString("LIFNR");//供应商帐户号
                    String NAME1 = getTable.getString("NAME1");//名称 1
                    String QUOTE = getTable.getString("QUOTE");//已百分比计的配额分配项目的配额
                    String QUOTEP = getTable.getString("QUOTEP");//已百分比计的配额分配项目的配额
                    String MENGE = getTable.getString("MENGE");//采购订单数量
                    String TOTAL = getTable.getString("TOTAL");//采购订单数量
                    String BAMNG = getTable.getString("BAMNG");//数量
                    String MEINS = getTable.getString("MEINS");//采购订单的计量单位
                    String EISBE = getTable.getString("EISBE");//采购订单数量
                    String EISLO = getTable.getString("EISLO");//采购订单数量
                    String DHNUM = getTable.getString("DHNUM");//采购订单数量
                    String LGORT = getTable.getString("LGORT");//库存地点
                    String WZJSL = getTable.getString("WZJSL");//到货未质检数量
                    String VERPR = getTable.getString("VERPR");//移动平均价格/周期单价
                    BigDecimal avg = new BigDecimal(VERPR);
                    BigDecimal price = null;
                    if(avg.compareTo(new BigDecimal(0)) == 0){
                        price = new BigDecimal(0.00);
                        price = price.divide(new BigDecimal(1), 2, RoundingMode.HALF_UP);
                    }else {
                        price = avg.divide(avg, 2, RoundingMode.HALF_UP);
                    }
                    // if(Integer.parseInt(MATNR.substring(10)) < 50011800 || Integer.parseInt(MATNR.substring(10)) > 50012100 ){
                    //     loopFlag = getTable.nextRow();
                    //     continue;
                    // }
                    sparepartEntity.setSparepartkey(MATNR.substring(10));//设备编码
                    sparepartEntity.setSparepartname(MAKTX);//备件名称
                    SparepartEntity sparepartEntity1 = sparepartMapper.selectOne(sparepartEntity);
                    if (sparepartEntity1 == null){
                        continue;
                    }
                    StockEntity stockEntity = new StockEntity();
                    stockEntity.setStockkey(LGORT);
                    StockEntity stockEntity1 = stockMapper.selectOne(stockEntity);
                    if (sparepartEntity1 == null){
                        continue;
                    }
                    OrganizationEntity organizationEntity = new OrganizationEntity();
                    organizationEntity.setOrganizationkey(WERKS);
                    OrganizationEntity organizationEntity1 = organizationMapper.selectOne(organizationEntity);
                    if (organizationEntity1 == null){
                        continue;
                    }
                    StockcontrolEntity stockcontrolEntity = new StockcontrolEntity();
                    stockcontrolEntity.setSpid(sparepartEntity1.getId());
                    stockcontrolEntity.setStockid(stockEntity1.getId());
                    StockcontrolEntity entity1 = stockcontrolMapper.selectOne(stockcontrolEntity);
                    stockcontrolEntity.setOrgid(organizationEntity1.getId());
                    stockcontrolEntity.setSparepartkey(sparepartEntity1.getSparepartkey());
                    stockcontrolEntity.setSparepartname(sparepartEntity1.getSparepartname());
                    stockcontrolEntity.setStockname(stockEntity1.getStockname());
                    stockcontrolEntity.setAveragepricestock(price);
                    int i = 0;
                    if (entity1 != null){
                        stockcontrolEntity.setModificationdate(new Date());
                         i = stockcontrolMapper.update(stockcontrolEntity);
                    }else {
                        stockcontrolEntity.setCreatedate(new Date());
                         i = stockcontrolMapper.insert(stockcontrolEntity);
                    }
                    //移动到下一行
                    loopFlag = getTable.nextRow();
                    //修改记录状态1-成功;2-失败
                    if (i > 0){
                        obj.setStatus(1);
                    }else{
                        obj.setStatus(2);
                    }
                    updateStockRecordMapper.update(obj);
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return newList;
    }

   /* public static List<TransactionsDto>  getSPUseDateFromSAP(){
        JCoFunction function = null;
        JCoDestination destination = SAPConn.connect();
        List<TransactionsDto> newList = new ArrayList();
        try {
            //调用备件消耗
            function = destination.getRepository().getFunction("ZFMGE_GET_VOUCHER");
            JCoParameterList importParam = function.getImportParameterList(); //获得入参
            Date date = SAPDateCenter.getDate();
            importParam.setValue("IM_DATE",date);
            //importParam.setValue("IM_DATE","20180710");
            function.execute(destination);
            JCoParameterList exportTable= function.getTableParameterList();

            JCoTable getTable = exportTable.getTable("OT_VOUCHER");// 这是调用后 RFC 返回的表名
            getTable.firstRow();
            boolean loopFlag = !getTable.isEmpty();
            while(loopFlag){
                TransactionsDto transactionsDto = new TransactionsDto();
                //根据表字段来获取值
                String MBLNR = getTable.getString("MBLNR");//物料凭证编号
                String MJAHR= getTable.getString("MJAHR");//物料凭证年度
                String ZEILE= getTable.getString("ZEILE");//物料凭证中的项目
                String MATNR= getTable.getString("MATNR");//物料号
                String BKTXT= getTable.getString("BKTXT");//凭证抬头文本
                String WERKS= getTable.getString("WERKS");//工厂
                String BWART= getTable.getString("BWART");//库存管理
                String LGORT= getTable.getString("LGORT");//库存地点
                BigDecimal DMBTR= getTable.getBigDecimal("DMBTR");//按本位币计的金额
                BigDecimal MENGE= getTable.getBigDecimal("MENGE");//数量
                MENGE = MENGE.multiply(new BigDecimal(-1));
                String MEINS= getTable.getString("MEINS");//基本计量单位
                String KOSTL= getTable.getString("KOSTL");//成本中心
                String AEDAT =  getTable.getString("AEDAT");//更改日期
                String VERPR= getTable.getString("VERPR");//周期单价
                String PEINH= getTable.getString("PEINH");//单价单位
                BigDecimal total = new BigDecimal(VERPR);
                BigDecimal count = new BigDecimal(PEINH);
                BigDecimal price = null;
                if(count.compareTo(new BigDecimal(0)) == 0){
                    price = new BigDecimal(0.00);
                    price = price.divide(new BigDecimal(1), 2, RoundingMode.HALF_UP);
                }else {
                    price = total.divide(count, 2, RoundingMode.HALF_UP);
                }


                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

                transactionsDto.setSpKey(MATNR.substring(10));//备件号
                transactionsDto.setQuantity(MENGE);//数量
                transactionsDto.setUnitPrice(price);//备件单价
                transactionsDto.setTransDate(format.parse(AEDAT));//更改日期
                String stockKey = WERKS + LGORT;

                transactionsDto.setStockKey(stockKey);//仓库号
                if(BKTXT.length() < 3 ) {
                    loopFlag = getTable.nextRow();
                    continue;
                }else {
                    transactionsDto.setWoKey(BKTXT.substring(1,BKTXT.length()));//工单号
                }
                transactionsDto.setCreditCostTypeKey(KOSTL);//成本中心
                transactionsDto.setRemark(MBLNR + MJAHR + ZEILE);
                if(stockKey.equals("10005001") || stockKey.equals("20005001")){
                    newList.add(transactionsDto);
                }
                //移动到下一行
                loopFlag = getTable.nextRow();
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return newList;
    }*/

    public static void main(String[] args) {
        SAPDateCenter.getSPDateFromSAP();
        //SAPDateCenter.getMODateFromSAP();
        //SAPDateCenter.getSPUseDateFromSAP();
    }


    public static Date getDate() throws ParseException {
        Calendar calendar = Calendar.getInstance();
        Date date = new Date();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_MONTH, 0);
        date = calendar.getTime();
        SimpleDateFormat sdf = new SimpleDateFormat(" yyyyMMdd");
        String newDate = sdf.format(date);
        Date ydate = sdf.parse(newDate);
        logger.info(newDate);
        return ydate;
    }

}

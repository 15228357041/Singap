package com.mingcloud.proxy.logiclayer.chuanhuahandler;

import com.mingcloud.Proxy;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.ChuanhuaMapper;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.ChuanhuaEntity;
import com.mingcloud.proxy.logiclayer.chuanhuahandler.webservice.DTBjReserveReq;
import com.mingcloud.proxy.logiclayer.chuanhuahandler.webservice.DTBjReserveRes;
import com.mingcloud.proxy.logiclayer.chuanhuahandler.webservice.SIAPIBjReserveOut;
import com.mingcloud.proxy.logiclayer.chuanhuahandler.webservice.SIAPIBjReserveOutService;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;


import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;



/**
 * @author zyn
 */
public class ChuanhuaThread implements Runnable {
	private static Logger logger = Logger.getLogger(ChuanhuaThread.class);
	private static final QName SERVICE_NAME = new QName("http://transfar.com/BjReserve", "SI_API_BjReserve_OutService");
	ChuanhuaMapper chuanhuaMapper = SpringContextUtil.getBean("chuanhuaMapper");
	private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	private static SimpleDateFormat logFormat = new SimpleDateFormat("yyyy-MM-dd");

	/**
	 * 日志打印流
	 */
	public static PrintWriter log = null;

	/**
	 * 项目路径
	 */
	private static String path;

	/**
	 * keywords根节点
	 */
	private static org.dom4j.Element root = null;

	/**
	 * doc类
	 */
	private static Document doc = null;
	
	/**
	 * 消息发送类
	 */
	private Map<String,String> messages = null;

	static {
		//设置节点路径
		String temppath = Proxy.class.getProtectionDomain().getCodeSource().getLocation().getPath();
		path = temppath.substring(0, temppath.lastIndexOf("/")) + "/keywords.xml";
		//设置日志流
		setLog(path);
	}

	private static void parseXml(String path) {
		SAXReader reader = new SAXReader(); // 1.创建一个xml解析器对象
		try {
			doc = reader.read(new File(path)); // 2.读取xml文档，返回Document对象
			root = doc.getRootElement();//获取根元素
		} catch (DocumentException e) {
			System.out.println(printLog(e.getMessage()));
		}
	}

	private static void setLog(String path) {
		try {
			String logpath = path.substring(0, path.lastIndexOf("/")) + "/logs/log-" + logFormat.format(new Date())
					+ ".txt";
			log = new PrintWriter(new OutputStreamWriter(new FileOutputStream(new File(logpath), true), "utf-8"), true);
		} catch (Exception e) {
			System.out.println(printLog(e.getMessage()));
		}
	}

	public void run() {
		while (true) {
			try {
				logger.info(printLog("ChuanhuaThread running..."));
				GetAllSIFATransferData();//主方法
				logger.info(printLog("ChuanhuaThread wait for 5 minutes..."));
				Thread.sleep(5 * 60 * 1000);
			} catch (InterruptedException e) {
				logger.error(printLog("ChuanhuaThread: " + e));
			}
		}
	}

	public void GetAllSIFATransferData() {
		setLog(path);
		//重新初始化message
		messages = new HashMap<String,String>();
		//获取发送信息的message
		messages = this.getMessageList();
		//发送信息
		this.sendMessage(messages);
		messages = null;
	}

	private void sendMessage(Map<String,String> messages) {
		try {
			//查看消息map
			if (messages == null || messages.size()==0) {
				System.out.println(printLog("Empty Ruqest!"));
				return;
			}

			SIAPIBjReserveOutService ss = new SIAPIBjReserveOutService(SIAPIBjReserveOutService.WSDL_LOCATION,
					SERVICE_NAME);
			SIAPIBjReserveOut port = ss.getHTTPPort(); // 绑定soap头，用户名，密码
			((BindingProvider) port).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, "pisuper");
			((BindingProvider) port).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "Transfar2016");
			System.out.println(printLog("Invoking siAPIBjReserveOut..."));
			for(String message : messages.values()) {
				System.out.println("sending message>>>");
				//发送消息
				invokingService(message, port);
//				System.out.println(printLog(message));
			}
			//发送后检查xml
			checkAfterSend(messages);
		} catch (Exception e) {
			System.out.println(printLog(e.getMessage()));
		}
	}
	
	private void checkAfterSend(Map<String,String> messages) {
		Writer osWrite = null;
		OutputFormat format = null;
		XMLWriter writer = null;
		SAXReader reader = null;
		try {
			reader = new SAXReader(); // 1.创建一个xml解析器对象
			doc = reader.read(new File(path)); // 2.读取xml文档，返回Document对象
			root = doc.getRootElement();//获取根元素
			
			osWrite = new OutputStreamWriter(new FileOutputStream(new File(path)));// 创建输出流
			format = OutputFormat.createPrettyPrint(); // 获取输出的指定格式
			format.setEncoding("UTF-8");// 设置编码 ，确保解析的xml为UTF-8格式
			writer = new XMLWriter(osWrite, format);// XMLWriter
			// 指定输出文件以及格式
			for(Map.Entry<String,String> entry : messages.entrySet()) {
				org.dom4j.Element element = root.element(entry.getKey());
				if (element == null) {
					root.addElement(entry.getKey());
				} 
			}
			writer.write(doc);// 把document写入xmlFile指定的文件(可以为被解析的文件或者新创建的文件)
			writer.flush();
			System.out.println(printLog("saving after succeed"));
		} catch (Exception e) {
			System.out.println(printLog(e.getMessage()));
		}finally {
			if(writer!=null) {
				try {
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if(osWrite!=null) {
				try {
					osWrite.close();
				} catch (IOException e) {
					System.out.println(printLog(e.getMessage()));
				}
			}
		}
	}
	
	private void invokingService(String message, SIAPIBjReserveOut port) {
		DTBjReserveReq requestAll = new DTBjReserveReq();
		DTBjReserveReq.BODY requestBody = new DTBjReserveReq.BODY();
		requestBody.setECFFILE("APIINTERFACE_WO.ecf");
		requestBody.setEXPORTFILE(message);//设置消息
		requestAll.setBODY(requestBody);
		System.out.println(printLog("request.ECFFILE:" + requestAll.getBODY().getECFFILE()));
		System.out.println(printLog("request.EXPORTFILE:" + requestAll.getBODY().getEXPORTFILE()));
		DTBjReserveRes responseAll = port.siAPIBjReserveOut(requestAll);
		if (responseAll == null) {
			System.out.println(printLog("NoResponseReturn..."));
		} else {
			System.out.println(printLog("response.LOGFILE:" + responseAll.getBODY().getLOGFILE()));
			System.out.println(printLog("response.WEBEXPORTRESULT:" + responseAll.getBODY().getWEBEXPORTRESULT()));
		}
	}

	private Map<String,String> getMessageList() {
		parseXml(path);
		String message = "";
		Set<String> templeSet = new HashSet<String>();
		Set<String> newWokeys = new HashSet<String>();
		boolean flag = false; // 是否执行
		try {
			List<ChuanhuaEntity> list = chuanhuaMapper.selectAll();
//			List<ChuanhuaEntity> list = setList();
			for (ChuanhuaEntity entity : list) {
				flag = false;
				String wOKey = entity.getwOKey();
				// 获取元素
				org.dom4j.Element element = root.element(wOKey);
				String extraWOinfo5Str = entity.getExtraWOinfo5();
				if (element == null) {
					newWokeys.add(wOKey);
//					root.addElement(wOKey);
					flag = true;
				} else {
					if (extraWOinfo5Str != null && !"".equals(extraWOinfo5Str)) {
						System.out.println("extraWOinfo5Str1:" + extraWOinfo5Str);
						Integer extraWOinfo5 = Integer.valueOf(extraWOinfo5Str);
						if (extraWOinfo5 > 0 && extraWOinfo5 <= 9) {
							System.out.println("extraWOinfo5Str2:" + extraWOinfo5Str);
							if (element.getText() == null || !extraWOinfo5Str.equals(element.getText())) {
								element.setText(extraWOinfo5Str);
								System.out.println("extraWOinfo5Str3:" + extraWOinfo5Str);
								flag = true;
							}
						}
					}
				}
				if (!flag) {
					continue;
				}

				String extraWOinfo4 = entity.getExtraWOinfo4();
				String accountkey = entity.getAccountkey();
				String sPkey = entity.getsPkey();
				String sitekey = entity.getSitekey();
				String stockkey = "1040";
				String startdate = entity.getStartdate().replaceAll("-", "");
				String plannedunits = entity.getPlannedunits();
				//按照wokey绑定工单
				if(messages.containsKey(wOKey)) {
					//有相同的wokey，绑定到同一条工单
					String key = messages.get(wOKey);
					key += extraWOinfo4 + "`" + wOKey + "`" + accountkey + "`" + sPkey + "`" + sitekey + "`" + stockkey
							+ "`" + startdate + "`" + plannedunits + "\r";
					messages.put(wOKey, key);
				}else {
					//wokey不同，建立一条新的工单
					messages.put(wOKey, extraWOinfo4 + "`" + wOKey + "`" + accountkey + "`" + sPkey + "`" + sitekey + "`" + stockkey
							+ "`" + startdate + "`" + plannedunits + "\r");
				}
				
			}
			// wOKey
		} catch (Exception e) {
			System.out.println(printLog(e.getMessage()));
		} finally {
			try {
				saveDocument((javax.swing.text.Document) doc, new File(path),newWokeys);
			} catch (Exception e) {
				System.out.println(printLog(e.getMessage()));
			}
		}
		return messages;
	}

	public static void saveDocument(javax.swing.text.Document document, File xmlFile, Set<String> newWokeys) throws IOException {
		for(String newWokey :  newWokeys) {
			if(root.element(newWokey)==null) {
				root.addElement(newWokey);
			}
		}
		Writer osWrite = new OutputStreamWriter(new FileOutputStream(xmlFile));// 创建输出流
		OutputFormat format = OutputFormat.createPrettyPrint(); // 获取输出的指定格式
		format.setEncoding("UTF-8");// 设置编码 ，确保解析的xml为UTF-8格式
		XMLWriter writer = new XMLWriter(osWrite, format);// XMLWriter
															// 指定输出文件以及格式
		writer.write(document);// 把document写入xmlFile指定的文件(可以为被解析的文件或者新创建的文件)
		writer.flush();
		writer.close();
		osWrite.close();
//		System.out.println(printLog("saving before succeed"));
	}

	private static String printLog(String message) {
		log.println(sdf.format(new Date()) + "  " + message);
		return message;
	}
	
	
//	private List<ChuanhuaEntity> setList(){
//		List<ChuanhuaEntity> list = new ArrayList();
//		Scanner scan = new Scanner(System.in);
//		System.out.println("Bean的数量：");
//		Integer num = Integer.valueOf(scan.nextLine());
//		for(int i=0;i<num;i++) {
//			System.out.println("第"+(i+1)+"个数据,WOKEY:");
//			ChuanhuaEntity entity = new ChuanhuaEntity();
//			String wo = scan.nextLine();
//			entity.setwOKey(wo);
//			entity.setExtraWOinfo4(wo);
//			entity.setAccountkey(wo);
//			entity.setsPkey(wo);
//			entity.setSitekey(wo);
//			entity.setStockkey(wo);
//			entity.setStartdate(wo);
//			entity.setPlannedunits(wo);
//			list.add(entity);
//		}
//		return list;
//	}
}

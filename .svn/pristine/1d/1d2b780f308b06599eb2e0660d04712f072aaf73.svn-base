package com.mingcloud.proxy.logiclayer.purchaserehandler;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.log4j.Logger;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.PopodetailsMapper;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.PopomainMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.POpodetailsDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.POpodetailsEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.POpomainEntity;
import com.mingcloud.proxy.util.DateHelper;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.SpringContextUtil;

public class PurchasereDataInThread implements Runnable {
	private static Logger logger = Logger.getLogger(PurchasereDataInThread.class);

	private JdbcChange jdbcChange = JdbcChange.getJdbcChange();

	private DataCenter dataCenter = DataCenter.getInstance();

	private PopomainMapper popomainMapper = SpringContextUtil.getBean("popomainMapper");
	private PopodetailsMapper popodetailsMapper = SpringContextUtil.getBean("popodetailsMapper");

	public PurchasereDataInThread() {
		// TODO Auto-generated constructor stub
		//设置数据源为sqlserver
		jdbcChange.changeJdbc(JdbcChange.sqlServerDataSource);
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		logger.info("PurchasereDataInThread begin");

		TimerTask task = new TimerTask() {
			@Override
			public void run() {
				ThreadBegin();
				logger.info("PurchasereDataInThread wait one day");
			}
		};
		// 设置执行时间
		Date date = DateHelper.getTimePurchasereDataInThread();
		// 设置为daemon线程，当程序只有daemon线程的时候，会自动终止运行
		Timer timer = new Timer("PurchasereDataInThread", true);
		// 每天的date时刻执行task
		timer.schedule(task, date, 24 * 60 * 60 * 1000);
	}
	
	private void ThreadBegin() {
		try {
			getAllPurchasereData();
			Thread.sleep(1000);
		} catch (Exception e) {
			logger.error("PurchasereDataInThread:" + e);
		}
	}

	private void getAllPurchasereData() {
		// TODO Auto-generated method stub
		List<POpomainEntity> mainlist = new ArrayList<POpomainEntity>();
		try {
			mainlist = popomainMapper.selectAll();
			if (mainlist != null && !mainlist.isEmpty()) {
				for (POpomainEntity pOpomainEntity : mainlist) {
					int POID = pOpomainEntity.getPoid();
					List<POpodetailsEntity> detailslist = new ArrayList<POpodetailsEntity>();
					detailslist = popodetailsMapper.selectPOID(POID);
					if (detailslist != null && !detailslist.isEmpty()) {
						for (POpodetailsEntity pOpodetailsEntity : detailslist) {
							POpodetailsDto pOpodetailsDto = new POpodetailsDto();
							pOpodetailsDto.setIverifystateex(pOpomainEntity.getIverifystateex());
							pOpodetailsDto.setCappcode(pOpomainEntity.getCappcode());
							pOpodetailsDto.setCinvcode(pOpodetailsEntity.getCinvcode());
							dataCenter.pushPOpodetailslist(pOpodetailsDto);
						}
					}
				}
				logger.info("PurchasereDataInThread getAllPurchasereData succeeded...");
			}
			
		} catch (Exception e) {
			logger.error("PurchasereDataInThread getAllPurchasereData: " + e);
		}
	}

}

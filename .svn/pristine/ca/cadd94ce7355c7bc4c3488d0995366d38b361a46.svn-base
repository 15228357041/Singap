package com.mingcloud.proxy.logiclayer.stockcontrollerhandler;


import com.mingcloud.Proxy;
import com.mingcloud.proxy.common.Constants;
import com.mingcloud.proxy.common.SAPConn;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.*;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.SparepartDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.LogEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.SparepartEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.StockEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.StockcontrolEntity;
import com.mingcloud.proxy.datalayer.entity.geelyasp.UpdateStockRecordEntity;
import com.mingcloud.proxy.util.PropertiesFileUtil;
import com.mingcloud.proxy.util.SpringContextUtil;
import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoTable;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class SAPDateCenter implements Runnable {
    private static SparepartMapper sparepartMapper = SpringContextUtil.getBean("sparepartMapper");
    private static StockMapper stockMapper = SpringContextUtil.getBean("stockMapper");
    private static StockcontrolMapper stockcontrolMapper = SpringContextUtil.getBean("stockcontrolMapper");
    private static OrganizationMapper organizationMapper = SpringContextUtil.getBean("organizationMapper");
    private static UpdateStockRecordMapper updateStockRecordMapper = SpringContextUtil.getBean("updateStockRecordMapper");
    private static LogMapper logMapper = SpringContextUtil.getBean("logMapper");
    private static Logger logger = Logger.getLogger(SAPDateCenter.class);

    @Override
    public void run() {
        while (true) {
            try {
             /*   while (true) {
                    if (dataCenter.getMessageSourceListSize() == 0) break;
                }*/
                logger.info("SAPDatacenter running...");
                getSPDateFromSAP();
                Thread.sleep(1 * 5000);
            } catch (Exception e) {
                logger.error("SapDateCenter: " + e);
            }
        }
    }


    public List<SparepartDto> getSPDateFromSAP() {
        JCoFunction function = null;
        JCoDestination destination = null;
        List<SparepartDto> newList = new ArrayList();
        UpdateStockRecordEntity updateStockRecordEntity = new UpdateStockRecordEntity();
        updateStockRecordEntity.setStatus(0);
        List<UpdateStockRecordEntity> list = updateStockRecordMapper.select(updateStockRecordEntity);
        String jdbcConnect = PropertiesFileUtil.getInstance("jdbc").get("jdbc.connect");
        List<SparepartEntity> spList =  sparepartMapper.selectKeyIdList();
        Map<String, Integer> spMap = new ConcurrentHashMap<>();
        //获取所有备件编码和id
        for (SparepartEntity entity : spList) {
            spMap.put(entity.getSparepartkey(), entity.getId());
        }

        Map<String, Integer> stockControlMap = new ConcurrentHashMap<>();
        //获取所有库存信息 仓库编码_备件编码  作为key
        List<StockcontrolEntity> stockControlList = stockcontrolMapper.selectKeyIdList();
        for (StockcontrolEntity entity : stockControlList) {
            stockControlMap.put(entity.getStockkey() + "_" +entity.getSparepartkey(), entity.getId());
        }

        Map<String, Integer> stockMap = new ConcurrentHashMap<>();
        //获取所有仓库信息
        List<StockEntity> stockList = stockMapper.selectKeyIdList();
        for (StockEntity entity : stockList) {
            stockMap.put(entity.getStockkey(), entity.getId());
        }

        for (UpdateStockRecordEntity obj : list) {
            if ("test".equals(jdbcConnect)) {
                switch (obj.getOrganizationkey()) {
                    case "106Z":
                        Proxy.sapNum = "GMQ";
                        break;
                    case "6321":
                        Proxy.sapNum = "D01";
                        break;
                    case "3302":
                        Proxy.sapNum = "GMQ";
                        break;
                    case "5202":
                        Proxy.sapNum = "GMQ";
                        break;
                    case "1081":
                        Proxy.sapNum = "ECQ";
                        break;
                    case "9014":
                        Proxy.sapNum = "ECQ";
                        break;
                    default:
                        continue;
                }
            }
            if ("prod".equals(jdbcConnect)) {
                switch (obj.getOrganizationkey()) {
                    case "106Z":
                        Proxy.sapNum = "GMP";
                        break;
                    case "3302":
                        Proxy.sapNum = "GMP";
                        break;
                    case "5202":
                        Proxy.sapNum = "GMP";
                        break;
                    case "3320":
                        Proxy.sapNum = "GMP";
                        break;
                    case "6321":
                        Proxy.sapNum = "P01";
                        break;
                    case "1310":
                        Proxy.sapNum = "P01";
                        break;
                    case "5333":
                        Proxy.sapNum = "P01";
                        break;
                    case "3160":
                        Proxy.sapNum = "P01";
                        break;
                    case "1390":
                        Proxy.sapNum = "P01";
                        break;
                    case "1081":
                        Proxy.sapNum = "ECP";
                        break;
                    case "9014":
                        Proxy.sapNum = "ECP";
                        break;
                    case "2115":
                        Proxy.sapNum = "ECP";
                        break;
                    case "D355":
                        Proxy.sapNum = "ECP";
                        break;
                    case "2032":
                        Proxy.sapNum = "ECP";
                        break;
                    case "I033":
                        Proxy.sapNum = "ECP";
                        break;
                    default:
                        continue;
                }
            }
            try {
                destination = SAPConn.connect();
                int result = 0;
                //调用备件函数
                String sapFunction = PropertiesFileUtil.getInstance("configSapUrl-" + Proxy.sapNum).get("sapFunction");
                function = destination.getRepository().getFunction(sapFunction);
                JCoParameterList jCoParameterList = function.getImportParameterList();
                function.getImportParameterList().setValue("WERKS", obj.getOrganizationkey());
                function.getImportParameterList().setValue("MATNR", obj.getSparepartkey());
                function.getImportParameterList().setValue("CHECK", obj.getCheckuser());
                function.getImportParameterList().setValue("LIFNR", obj.getLifnr());
                function.getImportParameterList().setValue("MAKTX", obj.getSparepartname());
                if (StringUtils.isNotBlank(obj.getStockkey())){
                    function.getImportParameterList().setValue("LGORT", obj.getStockkey().split("\\_")[1] );
                }else{
                    function.getImportParameterList().setValue("LGORT", "");
                }
                function.execute(destination);
                JCoParameterList exportTable = function.getTableParameterList();
                JCoTable getTable = exportTable.getTable("GT_OUT");// 这是调用后 RFC 返回的表名
                getTable.firstRow();
                int size = getTable.getNumRows();
                boolean loopFlag = !getTable.isEmpty();
                String spKeyNoExist = "";

                //需要插入的库存信息
                List<StockcontrolEntity> insertStockControlList = new ArrayList<>();
                //需要更新的库存信息
                List<StockcontrolEntity> updateStockControlList = new ArrayList<>();

                while (loopFlag) {
                    //移动到下一行
                    SparepartEntity sparepartEntity = new SparepartEntity();
                    //根据表字段来获取值
                    String BUKRS = getTable.getString("BUKRS");//公司代码
                    String EKORG = getTable.getString("EKORG");//采购组织
                    String WERKS = getTable.getString("WERKS");//工厂
                    String EKGRP = getTable.getString("EKGRP");//采购组
                    String MATNR = getTable.getString("MATNR");//物料号
                    String MAKTX = getTable.getString("MAKTX");//物料描述（短文本）
                    String VDATU = getTable.getString("VDATU");//配额分配生效期
                    String BDATU = getTable.getString("BDATU");//配额分配有效期截止于
                    String QUPOS = getTable.getString("QUPOS");//配额协议项目
                    String BESKZ = getTable.getString("BESKZ");//采购类型
                    String SOBES = getTable.getString("SOBES");//特别采购类型
                    String LIFNR = getTable.getString("LIFNR");//供应商帐户号
                    String NAME1 = getTable.getString("NAME1");//名称 1
                    String QUOTE = getTable.getString("QUOTE");//已百分比计的配额分配项目的配额
                    String QUOTEP = getTable.getString("QUOTEP");//已百分比计的配额分配项目的配额
                    String MENGE = getTable.getString("MENGE");//采购订单数量
                    String TOTAL = getTable.getString("TOTAL");//采购订单数量
                    String BAMNG = getTable.getString("BAMNG");//数量
                    String MEINS = getTable.getString("MEINS");//采购订单的计量单位
                    String EISBE = getTable.getString("EISBE");//采购订单数量
                    String EISLO = getTable.getString("EISLO");//采购订单数量
                    String DHNUM = getTable.getString("DHNUM");//采购订单数量
                    String LGORT = getTable.getString("LGORT");//库存地点
                    String WZJSL = getTable.getString("WZJSL");//到货未质检数量
                    String VERPR = getTable.getString("VERPR");//移动平均价格/周期单价
                    BigDecimal avg = new BigDecimal(VERPR);
                    BigDecimal price = null;
                    if (avg.compareTo(new BigDecimal(0)) == 0) {
                        price = new BigDecimal(0.00);
                        price = price.divide(new BigDecimal(1), 2, RoundingMode.HALF_UP);
                    } else {
                        price = avg;
                        //price = avg.divide(avg, 2, RoundingMode.HALF_UP);
                    }

                    //备件编码
                    String sparepartKey = MATNR.replaceFirst("^0*", "");
                    Integer spId = spMap.get(sparepartKey);
                    if (spId == null) {
                        spKeyNoExist += MATNR.replaceFirst("^0*", "") + ",";
                        loopFlag = getTable.nextRow();
                        continue;
                    }

                    String stockKey = WERKS + "_" + LGORT;
                    Integer stockId = stockMap.get(stockKey);
                    if (stockId == null) {
                        loopFlag = getTable.nextRow();
                        continue;
                    }

                    Integer stockControlId = stockControlMap.get(stockKey + "_" + sparepartKey);
                    StockcontrolEntity stockcontrolEntity = new StockcontrolEntity();
                    stockcontrolEntity.setSpid(spId);
                    stockcontrolEntity.setStockid(stockId);
                    stockcontrolEntity.setOrgid(obj.getOrgid());
                    stockcontrolEntity.setQty(new BigDecimal(BAMNG));
                    stockcontrolEntity.setAveragepricestock(price);
                    if (stockControlId == null) {
                        stockcontrolEntity.setCreatedate(new Date());
                        //没有库存信息的放入插入列表，否则放入更新列表
                        insertStockControlList.add(stockcontrolEntity);
                    } else {
                        stockcontrolEntity.setModificationdate(new Date());
                        stockcontrolEntity.setId(stockControlId);
                        updateStockControlList.add(stockcontrolEntity);
                    }
                    loopFlag = getTable.nextRow();
                }

                //批量插入处理
                if (insertStockControlList.size() > 0) {
                   result += batchInserStockControl(insertStockControlList);
                }

                //批量更新处理
                if (updateStockControlList.size() > 0) {
                    result += batchUpdateStockControl(updateStockControlList);
                }
                
                LogEntity logDto = new LogEntity();
                logDto.setExtravarchar3(function.getImportParameterList().toString());
                logDto.setExtraid2(Constants.LOG_EXTRAID2_OUT);
                logDto.setTypeid(10);
                if (0 == size){
                    obj.setStatus(2);
                    logDto.setExtravarchar1("sap");
                    logDto.setExtravarchar2("SAP没有备件");
                    logDto.setExtraid3(Constants.LOG_EXTRAID3_ERROR);
                } else if (result == size) {
                    obj.setStatus(1);
                    logDto.setExtravarchar1("sap");
                    logDto.setExtravarchar2("数据同步成功");
                    logDto.setExtraid3(Constants.LOG_EXTRAID3_SUCCESS);
                } else if (result < size) {
                    obj.setStatus(1);
                    if (StringUtils.isNotBlank(spKeyNoExist) && spKeyNoExist.length() > 3800) {
                        spKeyNoExist = spKeyNoExist.substring(0,3800);
                    }
                    logDto.setExtravarchar2("同步到【"+size+"】条库存信息，【" + (size - result) +"】条物料信息EAM中不存在，SAP中物料编码{" + spKeyNoExist + "...}");
                    logDto.setExtravarchar1("sap");
                    logDto.setExtraid3(Constants.LOG_EXTRAID3_SUCCESS);
                } else {
                    obj.setStatus(2);
                    logDto.setExtravarchar1("sap");
                    logDto.setExtravarchar2("没有备件");
                    logDto.setExtraid3(Constants.LOG_EXTRAID3_ERROR);
                }
                logDto.setTypeid(10);
                logDto.setCreatedate(new Date());
                logMapper.insert(logDto);
                obj.setModificationdate(new Date());
                updateStockRecordMapper.update(obj);
            } catch (Exception e) {
                obj.setStatus(2);
                updateStockRecordMapper.update(obj);
                LogEntity logDto = new LogEntity();
                logDto.setTypeid(10);
                logDto.setExtraid2(Constants.LOG_EXTRAID2_OUT);
                logDto.setExtravarchar1("sap");
                logDto.setExtraid3(Constants.LOG_EXTRAID3_ERROR);
                logDto.setExtravarchar2(e.toString());
                logDto.setCreatedate(new Date());
                String extravarchar3 = function.getImportParameterList() == null ? null : function.getImportParameterList().toString();
                logDto.setExtravarchar3(extravarchar3);
                logMapper.insert(logDto);
                continue;
            }
        }
        return newList;
    }

   /* public static List<TransactionsDto>  getSPUseDateFromSAP(){
        JCoFunction function = null;
        JCoDestination destination = SAPConn.connect();
        List<TransactionsDto> newList = new ArrayList();
        try {
            //调用备件消耗
            function = destination.getRepository().getFunction("ZFMGE_GET_VOUCHER");
            JCoParameterList importParam = function.getImportParameterList(); //获得入参
            Date date = SAPDateCenter.getDate();
            importParam.setValue("IM_DATE",date);
            //importParam.setValue("IM_DATE","20180710");
            function.execute(destination);
            JCoParameterList exportTable= function.getTableParameterList();

            JCoTable getTable = exportTable.getTable("OT_VOUCHER");// 这是调用后 RFC 返回的表名
            getTable.firstRow();
            boolean loopFlag = !getTable.isEmpty();
            while(loopFlag){
                TransactionsDto transactionsDto = new TransactionsDto();
                //根据表字段来获取值
                String MBLNR = getTable.getString("MBLNR");//物料凭证编号
                String MJAHR= getTable.getString("MJAHR");//物料凭证年度
                String ZEILE= getTable.getString("ZEILE");//物料凭证中的项目
                String MATNR= getTable.getString("MATNR");//物料号
                String BKTXT= getTable.getString("BKTXT");//凭证抬头文本
                String WERKS= getTable.getString("WERKS");//工厂
                String BWART= getTable.getString("BWART");//库存管理
                String LGORT= getTable.getString("LGORT");//库存地点
                BigDecimal DMBTR= getTable.getBigDecimal("DMBTR");//按本位币计的金额
                BigDecimal MENGE= getTable.getBigDecimal("MENGE");//数量
                MENGE = MENGE.multiply(new BigDecimal(-1));
                String MEINS= getTable.getString("MEINS");//基本计量单位
                String KOSTL= getTable.getString("KOSTL");//成本中心
                String AEDAT =  getTable.getString("AEDAT");//更改日期
                String VERPR= getTable.getString("VERPR");//周期单价
                String PEINH= getTable.getString("PEINH");//单价单位
                BigDecimal total = new BigDecimal(VERPR);
                BigDecimal count = new BigDecimal(PEINH);
                BigDecimal price = null;
                if(count.compareTo(new BigDecimal(0)) == 0){
                    price = new BigDecimal(0.00);
                    price = price.divide(new BigDecimal(1), 2, RoundingMode.HALF_UP);
                }else {
                    price = total.divide(count, 2, RoundingMode.HALF_UP);
                }


                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

                transactionsDto.setSpKey(MATNR.substring(10));//备件号
                transactionsDto.setQuantity(MENGE);//数量
                transactionsDto.setUnitPrice(price);//备件单价
                transactionsDto.setTransDate(format.parse(AEDAT));//更改日期
                String stockKey = WERKS + LGORT;

                transactionsDto.setStockKey(stockKey);//仓库号
                if(BKTXT.length() < 3 ) {
                    loopFlag = getTable.nextRow();
                    continue;
                }else {
                    transactionsDto.setWoKey(BKTXT.substring(1,BKTXT.length()));//工单号
                }
                transactionsDto.setCreditCostTypeKey(KOSTL);//成本中心
                transactionsDto.setRemark(MBLNR + MJAHR + ZEILE);
                if(stockKey.equals("10005001") || stockKey.equals("20005001")){
                    newList.add(transactionsDto);
                }
                //移动到下一行
                loopFlag = getTable.nextRow();
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return newList;
    }*/

    public static void main(String[] args) {
        //SAPDateCenter.getSPDateFromSAP();
        //SAPDateCenter.getMODateFromSAP();
        //SAPDateCenter.getSPUseDateFromSAP();
    }


    public static Date getDate() throws ParseException {
        Calendar calendar = Calendar.getInstance();
        Date date = new Date();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_MONTH, 0);
        date = calendar.getTime();
        SimpleDateFormat sdf = new SimpleDateFormat(" yyyyMMdd");
        String newDate = sdf.format(date);
        Date ydate = sdf.parse(newDate);
        return ydate;
    }

    private int batchInserStockControl(List<StockcontrolEntity> entityList) {
        //插入数据库数量
        int insertSize = 0;
        int batchLimit = 100;//限制条数
        try {
            int size = entityList.size();
            if (size > batchLimit) {
                //需要分批次
                int part = size / batchLimit;
                for (int i = 0; i < part; i++) {
                    List<StockcontrolEntity> batchInsertList = entityList.subList(0, batchLimit);
                    insertSize += stockcontrolMapper.batchInsert(batchInsertList);
                    entityList.subList(0, batchLimit).clear();
                }
                if (!entityList.isEmpty()) {
                    //表示剩下的数据
                    insertSize += stockcontrolMapper.batchInsert(entityList);
                }
            } else {
                insertSize += stockcontrolMapper.batchInsert(entityList);
            }

        } catch (Exception e) {
            throw e;
        }
        return insertSize;
    };

    private int batchUpdateStockControl(List<StockcontrolEntity> entityList) {
        //插入数据库数量
        int updateSize = 0;
        int batchLimit = 100;//限制条数
        try {
            int size = entityList.size();
            if (size > batchLimit) {
                //需要分批次
                int part = size / batchLimit;
                for (int i = 0; i < part; i++) {
                    List<StockcontrolEntity> batchUpdateList = entityList.subList(0, batchLimit);
                    updateSize += stockcontrolMapper.batchUpdate(batchUpdateList);
                    entityList.subList(0, batchLimit).clear();
                }
                if (!entityList.isEmpty()) {
                    //表示剩下的数据
                    updateSize += stockcontrolMapper.batchUpdate(entityList);
                }
            } else {
                updateSize += stockcontrolMapper.batchUpdate(entityList);
            }
        } catch (Exception e) {
            throw e;
        }
        return updateSize;
    };

}

package com.mingcloud.proxy.logiclayer.messagehandler;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datacenter.messageData.MessageSourceData;
import com.mingcloud.proxy.datacenter.messageData.MessageconfigData;
import com.mingcloud.proxy.datacenter.messageData.SucmessagelogData;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.MessageSourceDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.MessageSourceEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.MessageconfigEntity;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.SucmessagelogEntity;
import org.apache.commons.dbcp.BasicDataSource;
import org.apache.log4j.Logger;
import org.springframework.transaction.annotation.Transactional;
import redis.clients.jedis.Jedis;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 * 消息传入线程
 * Created by zyn on 2018/8/8.
 */
public final class MessageSourceDataInThread implements Runnable {

    private static Logger logger = Logger.getLogger(MessageSourceDataInThread.class);

    private DataCenter dataCenter = DataCenter.getInstance();

    private static MessageSourceData messageSourceData = MessageSourceData.getInstance();

    private static SucmessagelogData sucmessagelogData = SucmessagelogData.getInstance();

    private static MessageconfigData messageconfigData = MessageconfigData.getInstance();

    /**
     * 企业微信配置
     */
    public static String officalwechatcorpid;

    public static String officalwechatcorpsecret;

    public static String officalwechatagentid;

    /**
     * 邮箱配置
     */
    public static String mtransportprotocol;

    public static String msmtpserver;

    public static String msmtpport;

    public static String maccount;

    public static String mpwd;

    public static String msmtpauth;

    public static String msmtpssl;

    /**
     * 吉利C3配置
     */


    /**
     * redies
     */
    public static Jedis jedis;

    /**
     * 连接池设置
     */
    public static BasicDataSource ds = null;

    /**
     * 互斥锁
     */
    public static final Object LOCK = new Object();

    public static Set<String> keySet = new HashSet<String>();

    static {
//        setJedis();
        getMessageConfig();
        setDataSource();
//        cleanTempLog();
    }

    /**
     * 设置redies
     */
    private static void setJedis() {
        //连接服务器
//        jedis = new Jedis("127.0.0.1", 6379);
        //权限认证
//      jedis.auth("");
    }

    /**
     * 设置连接池
     */
    private static void setDataSource() {
        try {
            //读取db.properties文件
            Properties props = new Properties();
            //使用类路径的读取方式
            InputStream in = MessageSourceDataInThread.class.getResourceAsStream("/jdbc.properties");
            //加载文件
            props.load(in);
            //读取信息
            String driver = props.getProperty("jdbc.mysql.driver");
            String url = props.getProperty("jdbc.mysql.url");
            String username = props.getProperty("jdbc.mysql.username");
            String password = props.getProperty("jdbc.mysql.password");
            int initialSize = 3;
            int maxActive = 3;
            ds = new BasicDataSource();
            //设置连接池参数
            ds.setDriverClassName(driver);
            ds.setUrl(url);
            ds.setUsername(username);
            ds.setPassword(password);
            ds.setInitialSize(initialSize);
            ds.setMaxActive(maxActive);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 获取连接对象
     *
     * @return
     */
    private static Connection getConn() {
        System.out.println("getConnection");
        Connection conn = null;
        try {
            conn = ds.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }

    /**
     * 获取配置
     */
    private static void getMessageConfig() {
        messageconfigData.resetMessageconfigList();
        MessageconfigEntity messageconfigEntity = messageconfigData.getSucmessagelogList().get(0);
        //企业微信号
        officalwechatcorpid = messageconfigEntity.getOfficalwechatcorpid();
        officalwechatcorpsecret = messageconfigEntity.getOfficalwechatcorpsecret();
        officalwechatagentid = messageconfigEntity.getOfficalwechatagentid();
        //邮箱
        mtransportprotocol = messageconfigEntity.getMtransportprotocol();
        msmtpserver = messageconfigEntity.getMsmtpserver();
        msmtpport = messageconfigEntity.getMsmtpport();
        maccount = messageconfigEntity.getMaccount();
        mpwd = messageconfigEntity.getMpwd();
        msmtpauth = messageconfigEntity.getMsmtpauth();
        msmtpssl = messageconfigEntity.getMsmtpssl();
    }

    /**
     * 清理暂存数据
     */
    private static void cleanTempLog() {
        jedis.del("keys");
    }

    public void run() {
        while (true) {
            try {
                logger.info("MessageSourceDataInThread running...");
                while (true) {
                    if (dataCenter.getMessageSourceListSize() == 0) break;
                }
                GetAllMessageSourceData();
                Thread.sleep(1 * 1000);
                logger.info("MessageSourceDataInThread wait for 1 seconds...");
            } catch (Exception e) {
                logger.error("MessageSourceDataInThread: " + e);
            }
        }
    }

    @Transactional
    public void GetAllMessageSourceData() {
        Connection conn = getConn();
        Date now = new Date();
        List<Map<String, String>> sqlRealResultList = null;
        /*List<SucmessagelogEntity> sucmessagelogTmepList = null;*/
        try {
            messageSourceData.resetMessageSourceList();
            List<MessageSourceEntity> messageSourceList = messageSourceData.getMessageSourceList();
            for (MessageSourceEntity entity : messageSourceList) {

                //检验执行时间
                if (entity.getNextexecutedate() == null || now.getTime() > entity.getNextexecutedate().getTime()) {
                    entity.setLastexecutedate(now);
                    entity.setNextexecutedate(new Date(now.getTime() + entity.getMessageinterval()));
                } else {
                    continue;
                }
                String querySql = entity.getQuerysql();
                List<Map<String, String>> sqlResultList = null;
                try {

                    sqlResultList = this.execute(conn, querySql);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                sqlRealResultList = new LinkedList<Map<String, String>>();
                /*sucmessagelogTmepList = new LinkedList<SucmessagelogEntity>();*/
                List<String> isAcceptorsExistList = this.getAcceptorList(entity);
                for (Map<String, String> sqlResultMap : sqlResultList) {
                    //是否需要加入
                    boolean acceptorExistListflg = false;
                    for (int i = 0; i < isAcceptorsExistList.size(); i++) {
                        if (!"".equals(sqlResultMap.get(isAcceptorsExistList.get(i)))) {
                            acceptorExistListflg = true;
                        }
                    }
                    if (!acceptorExistListflg) {
                        continue;
                    }
                    SucmessagelogEntity sucmessagelogEntity = new SucmessagelogEntity();
                    sucmessagelogEntity.setMessagesourceid(entity.getId());
                    sucmessagelogEntity.setKeyword(entity.getKeyword());
                    sucmessagelogEntity.setKeywordvalue(sqlResultMap.get(sucmessagelogEntity.getKeyword()));
                    String key = new StringBuilder(entity.getId().toString()).append(":").
                            append(entity.getKeyword()).append(":").append(sqlResultMap.get(entity.getKeyword())).toString();
                    boolean jedisflag;
                    synchronized (LOCK) {
                        if (/*jedisflag = jedis.sismember("keys", key)*/ jedisflag = keySet.contains(key) || sucmessagelogData.isSucmessagelogExist(sucmessagelogEntity)) {
                            if (!jedisflag) {
                                /*jedis.sadd("keys", key);*/
                                keySet.add(key);
                            }
                            continue;
                        } else {
                            //存入临时日志池
                            /*jedis.sadd("keys", key);*/
                            keySet.add(key);
                            //存入结果池
                            sqlRealResultList.add(sqlResultMap);
                        }
                    }
                }
                /*this.setSucmessagelogTmepList(sucmessagelogTmepList);*/
                this.pushMessageSourceList(entity, sqlRealResultList, querySql);
            }
            if (messageSourceList != null && messageSourceList.size() > 0) {
                messageSourceData.updateBatchMessageSourceInterval(messageSourceList);
            }
            logger.info("InThread.GetDataSucceeded:" + dataCenter.getMessageSourceList().toString());
        } catch (Exception e) {
            logger.error("In.GetAllMessagesourceData(): " + e);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 存放临时日志集合
     *
     * @param sucmessagelogTmepList
     */
    private void setSucmessagelogTmepList(List<SucmessagelogEntity> sucmessagelogTmepList) {
        if (sucmessagelogTmepList.size() > 0) {
            sucmessagelogData.addSucmessagelogDataList(sucmessagelogTmepList);
            System.out.println("sucmessagelogTmepList:" + sucmessagelogTmepList.toString());
        }
    }

    /**
     * 解析接收用户
     *
     * @param entity
     * @return
     */
    private List<String> getAcceptorList(MessageSourceEntity entity) {
        List<String> isAcceptorsExistList = new ArrayList<String>();
        String acceptors = entity.getAcceptor();
        String[] acceptorArray = null;
        System.out.println("acceptorsA:" + acceptors);
        if (acceptors.indexOf("|") == -1) {
            acceptorArray = new String[]{acceptors};
        } else {
            acceptorArray = acceptors.split("\\|");
        }
        for (int i = 0; i < acceptorArray.length; i++) {
            StringBuilder acceptorbuilder = new StringBuilder(acceptorArray[i].trim());
            int lastbracket;
            if ((lastbracket = acceptorArray[i].indexOf("}")) != -1) {
                isAcceptorsExistList.add(acceptorbuilder.delete(lastbracket, lastbracket + 1).
                        deleteCharAt(0).toString());
            } else {
                isAcceptorsExistList.add(acceptorArray[i]);
            }
        }
        return isAcceptorsExistList;
    }


    /**
     * 将dto封装放入数据中心
     *
     * @param entity
     * @param sqlRealResultList
     * @param querySql
     */
    private void pushMessageSourceList(MessageSourceEntity entity, List<Map<String, String>> sqlRealResultList, String querySql) {
        if (sqlRealResultList.size() > 0) {
            System.out.println("push>>>>>>>>>>>>>>>>>");
            MessageSourceDto dto = new MessageSourceDto();
            dto.setId(entity.getId());
            dto.setMessagesourcekey(entity.getMessagesourcekey());
            dto.setMessagesourcename(entity.getMessagesourcename());
            dto.setQuerysql(querySql);
            dto.setContent(entity.getContent());
            dto.setSqlResultList(sqlRealResultList);
            dto.setKeyword(entity.getKeyword());
            dto.setType(entity.getType());
            dto.setEmailtitle(entity.getEmailtitle());
            dto.setAcceptor(entity.getAcceptor());
            dataCenter.pushMessageSourceList(dto);
        }
    }

    /**
     * 解析sql语句
     *
     * @param conn
     * @param querySql
     * @return
     * @throws Exception
     */
    public static List<Map<String, String>> execute(Connection conn, String querySql) throws Exception {
        List<Map<String, String>> listAll;
        java.sql.Statement stmt = null;
        ResultSet rs = null;
        try {
            if (conn.isClosed() || conn == null) {
                getConn();
            }
            Map<String, String> map = null;
            listAll = new LinkedList<Map<String, String>>();
            stmt = conn.createStatement();
            querySql = querySql.trim();
            if (querySql != null && !querySql.equals("")) {
                rs = stmt.executeQuery(querySql);
                java.sql.ResultSetMetaData rsmd = rs.getMetaData();
                int columnCount = rsmd.getColumnCount();
                while (rs.next()) {
                    map = new HashMap<String, String>();
                    for (int i = 1; i <= columnCount; i++) {
                        Object column = rs.getObject(i);
                        if (column != null) {
                            String columString = column.toString();
                            if (rsmd.getColumnType(i) == 93) {
                                columString = columString.substring(0, columString.lastIndexOf("."));
                            }
                            map.put(rsmd.getColumnLabel(i), columString);
                        } else {
                            map.put(rsmd.getColumnName(i), "");
                        }
                    }
                    listAll.add(map);
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (stmt != null) {
                stmt.close();
            }
        }
        return listAll;
    }

}

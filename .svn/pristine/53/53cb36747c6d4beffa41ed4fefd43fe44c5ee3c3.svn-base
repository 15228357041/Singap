package com.mingcloud.proxy.datacenter;

import com.mingcloud.proxy.datalayer.dto.archiveinfo.*;
import com.mingcloud.proxy.datalayer.dto.inspection.InspectionHeaderDto;
import com.mingcloud.proxy.datalayer.dto.inspection.InspectionPointDto;

import java.util.Vector;

public class DataCenter {
	
	//unicare项目
	public static final Integer COMMONRECORDEXLIST_MAX_LENGTH =100;
	
	private Vector<CommonrecodeexDto> Commonrecodeexlist = new Vector<CommonrecodeexDto> ();
	
	private static DataCenter instance = null;
	


	public static DataCenter getInstance() {
		if (instance == null) {
			instance = new DataCenter();
		} 
		return instance;
	}
	
	///////////
	public synchronized Vector<CommonrecodeexDto> getAll() {
		@SuppressWarnings("unchecked")
		Vector<CommonrecodeexDto> dataClone = (Vector<CommonrecodeexDto>) Commonrecodeexlist.clone();
		Commonrecodeexlist.removeAllElements();
        return dataClone;
	}
	
	public void pushCommonrecodeexlist(CommonrecodeexDto dto){
		Commonrecodeexlist.add(dto);
	}
	
	public synchronized CommonrecodeexDto popCommonrecodeexlist(){
		CommonrecodeexDto dto = Commonrecodeexlist.get(Commonrecodeexlist.size()-1);
		Commonrecodeexlist.remove(Commonrecodeexlist.size()-1);
		return dto;
	}
	
	public int getCommonrecodeexlistSize(){
		return Commonrecodeexlist.size();
	}
	
	public Vector<CommonrecodeexDto> getCommonrecodeexlist(){
		return Commonrecodeexlist;
	}
	//////////

	//message
	private Vector<MessageSourceDto> messageSourceList = new Vector<MessageSourceDto>();

	public Vector<MessageSourceDto> getMessageSourceList(){
		return messageSourceList;
	}

	public int getMessageSourceListSize(){
		return messageSourceList.size();
	}

	public synchronized MessageSourceDto popMessageSourceList(){
		MessageSourceDto dto = messageSourceList.get(messageSourceList.size()-1);
		messageSourceList.remove(messageSourceList.size()-1);
		return dto;
	}

	public void pushMessageSourceList(MessageSourceDto dto){
		messageSourceList.add(dto);
	}
	
	//VcomApi
	private Vector<CommonrecodeexDto> VcomApilist = new Vector<CommonrecodeexDto> ();

	public void pushVcomApilist(CommonrecodeexDto dto){
		VcomApilist.add(dto);
	}
	
	public CommonrecodeexDto popVcomApilist(){
		CommonrecodeexDto dto = VcomApilist.get(VcomApilist.size()-1);
		VcomApilist.remove(VcomApilist.size()-1);
		return dto;
	}
	
	public int getVcomApilistSize(){
		return VcomApilist.size();
	}
	
	public Vector<CommonrecodeexDto> getVcomApilist(){
		return VcomApilist;
	}
	
	//Weather
	private Vector<CommonrecodeexDto> WeatherCommonrecodeexlist = new Vector<CommonrecodeexDto> ();

	public void pushWeatherCommonrecodeexlist(CommonrecodeexDto dto){
		WeatherCommonrecodeexlist.add(dto);
	}
	
	public CommonrecodeexDto popWeatherCommonrecodeexlist(){
		CommonrecodeexDto dto = WeatherCommonrecodeexlist.get(WeatherCommonrecodeexlist.size()-1);
		WeatherCommonrecodeexlist.remove(WeatherCommonrecodeexlist.size()-1);
		return dto;
	}
	
	public int getWeatherCommonrecodeexlistSize(){
		return WeatherCommonrecodeexlist.size();
	}
	
	public Vector<CommonrecodeexDto> getWeatherCommonrecodeexlist(){
		return WeatherCommonrecodeexlist;
	}


	//stock
	/*
	 * CommonrecodeexDto.extravarchar1->cInvCode备件编码
	 * CommonrecodeexDto.extravarchar2->cWhCode仓库号
	 * CommonrecodeexDto.extradecimal1->fAvaQuantity库存
	*/
	private Vector<CommonrecodeexDto> StockCommonrecodeexlist = new Vector<CommonrecodeexDto>();
	
	public void pushStockCommonrecodeexlist(CommonrecodeexDto dto){
		StockCommonrecodeexlist.add(dto);
	}
	
	public CommonrecodeexDto popStockCommonrecodeexlist(){
		CommonrecodeexDto dto = StockCommonrecodeexlist.get(StockCommonrecodeexlist.size()-1);
		StockCommonrecodeexlist.remove(StockCommonrecodeexlist.size()-1);
		return dto;
	}
	
	public int getStockCommonrecodeexlistSize(){
		return StockCommonrecodeexlist.size();
	}
	
	public Vector<CommonrecodeexDto> getStockCommonrecodeexlist(){
		return StockCommonrecodeexlist;
	}
	
	//transactions
	private Vector<Rdrecords11Dto> rdrecords11list  = new Vector<Rdrecords11Dto>();
	
	public void pushRdrecords11list(Rdrecords11Dto dto) {
		rdrecords11list.add(dto);
	}
	
	public Rdrecords11Dto popRdrecords11list() {
		Rdrecords11Dto rdrecords11Dto = rdrecords11list.get(rdrecords11list.size()-1);
		rdrecords11list.remove(rdrecords11list.size()-1);
		return rdrecords11Dto;
	}
	
	public int getRdrecords11listSize() {
		return rdrecords11list.size();
	}
	
	public Vector<Rdrecords11Dto> getRdrecords11list() {
		return rdrecords11list;
	}
		
	//Purchaserequestline/POpodetails
	private Vector<POpodetailsDto> pOpodetailslist = new Vector<POpodetailsDto>();
	
	public void pushPOpodetailslist(POpodetailsDto dto) {
		pOpodetailslist.add(dto);
	}
	
	public POpodetailsDto popPOpodetailslist() {
		POpodetailsDto pOpodetailsDto = pOpodetailslist.get(pOpodetailslist.size()-1);
		pOpodetailslist.remove(pOpodetailslist.size()-1);
		return pOpodetailsDto;
	}
	
	public int getPOpodetailslistSize() {
		return pOpodetailslist.size();
	}
	
	public Vector<POpodetailsDto> getPOpodetailslist() {
		return pOpodetailslist;
	}
	
	//Maintenanceobject
	private Vector<MaintenanceobjectDto> maintenancelist = new Vector<MaintenanceobjectDto>();
	
	public void pushMaintenancelist(MaintenanceobjectDto dto) {
		maintenancelist.add(dto);
	}
	
	public MaintenanceobjectDto popMaintenancelist() {
		MaintenanceobjectDto maintenanceobjectDto = maintenancelist.get(maintenancelist.size()-1);
		maintenancelist.remove(maintenancelist.size()-1);
		return maintenanceobjectDto;
	}
	
	public int getMaintenancelistSize() {
		return maintenancelist.size();
	}
	
	public Vector<MaintenanceobjectDto> getMaintenancelist() {
		return maintenancelist;
	}
	
	//sparepart
	private Vector<SparepartDto> sparepartlist = new Vector<SparepartDto>();
	
	public void pushSparepartlist(SparepartDto dto) {
		sparepartlist.add(dto);
	}
	
	public SparepartDto popSparepartlist() {
		SparepartDto sparepartDto = sparepartlist.get(sparepartlist.size()-1);
		sparepartlist.remove(sparepartlist.size()-1);
		return sparepartDto;
	}
	
	public int getSparepartlistSize() {
		return sparepartlist.size();
	}
	
	public Vector<SparepartDto> getSparepartlist() {
		return sparepartlist;
	}
	
	//Workorder
	private Vector<WorkorderDto> workorderlist = new Vector<WorkorderDto>();
	
	public void pushWorkorderlist(WorkorderDto dto) {
		workorderlist.add(dto);
	}
	
	public WorkorderDto popWorkorderlist() {
		WorkorderDto workorderDto = workorderlist.get(workorderlist.size()-1);
		workorderlist.remove(workorderlist.size()-1);
		return workorderDto;
	}
	
	public int getWorkorderlistSize() {
		return workorderlist.size();
	}
	
	public Vector<WorkorderDto> getWorkorderlist() {
		return workorderlist;
	}
	
	//Position
	private Vector<PositionDto> positionlist = new Vector<PositionDto>();
	
	public void pushPositionlist(PositionDto dto) {
		positionlist.add(dto);
	}
	
	public PositionDto popPositionlist() {
		PositionDto positionDto = positionlist.get(positionlist.size()-1);
		positionlist.remove(positionlist.size()-1);
		return positionDto;
	}
	
	public int getPositionlistSize() {
		return positionlist.size();
	}
	
	public Vector<PositionDto> getPositionlist() {
		return positionlist;
	}
	
	//MaintenanceobjectgroupDto
	private Vector<MaintenanceobjectgroupDto> maintenanceobjectgrouplist = new Vector<MaintenanceobjectgroupDto>();
	
	public void pushMaintenancegrouplist(MaintenanceobjectgroupDto dto) {
		maintenanceobjectgrouplist.add(dto);
	}
	
	public MaintenanceobjectgroupDto popMaintenancegrouplist() {
		MaintenanceobjectgroupDto maintenanceobjectgroupDto = maintenanceobjectgrouplist.get(maintenanceobjectgrouplist.size()-1);
		maintenanceobjectgrouplist.remove(maintenanceobjectgrouplist.size()-1);
		return maintenanceobjectgroupDto;
	}
	
	public int getMaintenancegrouplistSize() {
		return maintenanceobjectgrouplist.size();
	}
	
	public Vector<MaintenanceobjectgroupDto> getMaintenancegrouplist() {
		return maintenanceobjectgrouplist;
	}
	
	//TechnicaldataDto
	private Vector<TechnicaldataDto> technicaldatalist = new Vector<TechnicaldataDto>();
	
	public void pushTechnicaldatalist(TechnicaldataDto dto) {
		technicaldatalist.add(dto);
	}
	
	public TechnicaldataDto popTechnicaldatalist() {
		TechnicaldataDto technicaldataDto = technicaldatalist.get(technicaldatalist.size()-1);
		technicaldatalist.remove(technicaldatalist.size()-1);
		return technicaldataDto;
	}
	
	public int getTechnicaldatalistSize() {
		return technicaldatalist.size();
	}
	
	public Vector<TechnicaldataDto> getTechnicaldatalist() {
		return technicaldatalist;
	}
	
	//MorelationtdDto
	private Vector<MorelationtdDto> morelationtdlist = new Vector<MorelationtdDto>();
	
	public void pushMorelationtdlist(MorelationtdDto dto) {
		morelationtdlist.add(dto);
	}
	
	public MorelationtdDto popMorelationtdlist() {
		MorelationtdDto morelationtdDto = morelationtdlist.get(morelationtdlist.size()-1);
		morelationtdlist.remove(morelationtdlist.size()-1);
		return morelationtdDto;
	}
	
	public int getMorelationtdlistSize() {
		return morelationtdlist.size();
	}
	
	public Vector<MorelationtdDto> getMorelationtdlist() {
		return morelationtdlist;
	}
	
	//Users
	private Vector<UsersDto> userslist = new Vector<UsersDto>();
	
	public void pushUserslist(UsersDto dto) {
		userslist.add(dto);
	}
	
	public UsersDto popUserslist() {
		UsersDto usersDto = userslist.get(userslist.size()-1);
		userslist.remove(userslist.size()-1);
		return usersDto;
	}
	
	public int getUserslistSize() {
		return userslist.size();
	}
	
	public Vector<UsersDto> getUserslist() {
		return userslist;
	}
	
	//Usergroup
	private Vector<UsergroupDto> usergrouplist = new Vector<UsergroupDto>();
	
	public void pushUsergrouplist(UsergroupDto dto) {
		usergrouplist.add(dto);
	}
	
	public UsergroupDto popUsergrouplist() {
		UsergroupDto usergroupDto = usergrouplist.get(usergrouplist.size()-1);
		usergrouplist.remove(usergrouplist.size()-1);
		return usergroupDto;
	}
	
	public int getUsergrouplistSize() {
		return usergrouplist.size();
	}
	
	public Vector<UsergroupDto> getUsergrouplist() {
		return usergrouplist;
	}

	//MES to EAM
	private  Vector<MesRecordDto> mesRecordList = new Vector<MesRecordDto>();

	public void pushMesRecordList(MesRecordDto dto){
		mesRecordList.add(dto);
	}

	public MesRecordDto popMesRecordList(){
		MesRecordDto mesRecordDto = mesRecordList.get(mesRecordList.size() - 1);
		mesRecordList.remove(mesRecordList.size() - 1);
		return mesRecordDto;
	}

	public int getMesRecordListSize(){
		return mesRecordList.size();
	}

	public Vector<MesRecordDto> getMesRecordList(){
		return mesRecordList;
	}


	//GEsparepart
	private Vector<SparepartDto> gesparepartlist = new Vector<SparepartDto>();

	public void pushGESparepartlist(SparepartDto dto) {
		sparepartlist.add(dto);
	}

	public SparepartDto popGESparepartlist() {
		SparepartDto sparepartDto = sparepartlist.get(sparepartlist.size()-1);
		sparepartlist.remove(sparepartlist.size()-1);
		return sparepartDto;
	}

	public int getGESparepartlistSize() {
		return sparepartlist.size();
	}

	public Vector<SparepartDto> getGESparepartlist() {
		return sparepartlist;
	}
	//Task
	private Vector<TaskDto> tasklist = new Vector<TaskDto>();

	public void pushTasklist(TaskDto dto) {
		tasklist.add(dto);
	}

	public TaskDto popTasklist() {
		TaskDto taskDto = tasklist.get(tasklist.size()-1);
		tasklist.remove(tasklist.size()-1);
		return taskDto;
	}

	public int getTasklistSize() {
		return tasklist.size();
	}

	public Vector<TaskDto> getTasklist() {
		return tasklist;
	}

	//VcomDay
	private Vector<StatisticsdaliyDto> VcomDaylist = new Vector<StatisticsdaliyDto> ();

	public void pushVcomDaylist(StatisticsdaliyDto dto){
		VcomDaylist.add(dto);
	}

	public StatisticsdaliyDto popVcomDaylist(){
		StatisticsdaliyDto dto = VcomDaylist.get(VcomDaylist.size()-1);
		VcomDaylist.remove(VcomDaylist.size()-1);
		return dto;
	}

	public int getVcomDaylistSize(){
		return VcomDaylist.size();
	}

	public Vector<StatisticsdaliyDto> getVcomDaylist(){
		return VcomDaylist;
	}

	//Inspection
	private Vector<InspectionHeaderDto> inspectionHeaderList = new Vector<InspectionHeaderDto>();

	public void pushInspectionHeaderList(InspectionHeaderDto dto){
		inspectionHeaderList.add(dto);
	}

	public InspectionHeaderDto popInspectionHeaderList(){
		InspectionHeaderDto dto = inspectionHeaderList.get(inspectionHeaderList.size() - 1);
		inspectionHeaderList.remove(inspectionHeaderList.size() - 1);
		return dto;
	}

	public int getInspectionHeaderListSize(){
		return inspectionHeaderList.size();
	}

	public Vector<InspectionHeaderDto> getInspectionHeaderList(){
		return  inspectionHeaderList;
	}

	//work_supplier  -> human
	//Users
	private Vector<HumanDto> humanList = new Vector<HumanDto>();

	public void pushHumanList(HumanDto dto) {
		humanList.add(dto);
	}

	public HumanDto popHumanList() {
		HumanDto humanDto = humanList.get(humanList.size()-1);
		humanList.remove(humanList.size()-1);
		return humanDto;
	}

	public int getHumanListSize() {
		return humanList.size();
	}

	public Vector<HumanDto> getHumanList() {
		return humanList;
	}

    //instrument 仪器仪表
    private Vector<InstrumentDto> instrumentList = new Vector<InstrumentDto>();

    public void pushInstrumentList(InstrumentDto dto) {
        instrumentList.add(dto);
    }

    public InstrumentDto popInstrumentList() {
        InstrumentDto instrumentDto = instrumentList.get(instrumentList.size()-1);
        instrumentList.remove(instrumentList.size()-1);
        return instrumentDto;
    }

    public int getInstrumentListSize() {
        return instrumentList.size();
    }

    public Vector<InstrumentDto> getInstrumentList() {
        return instrumentList;
    }

    //inspectionPoint 巡检点
	private Vector<InspectionPointDto> inspectionPointList = new Vector<InspectionPointDto>();

    public void pushInspectionPointList(InspectionPointDto dto){
        inspectionPointList.add(dto);
    }

    public InspectionPointDto popInspectionPointList() {
        InspectionPointDto inspectionPointDto = inspectionPointList.get(inspectionPointList.size()-1);
        inspectionPointList.remove(inspectionPointList.size()-1);
        return inspectionPointDto;
    }

    public int getInspectionPointListSize(){
        return inspectionPointList.size();
    }

    public Vector<InspectionPointDto> getInspectionPointList()  {
        return inspectionPointList;
    }

}


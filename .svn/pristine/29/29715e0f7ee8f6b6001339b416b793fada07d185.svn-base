package com.mingcloud.proxy.logiclayer.inspectionhandler;

import com.mingcloud.proxy.common.InspectionTypeEnum;
import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.HumanMapper;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.InspectionMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.HumanDto;
import com.mingcloud.proxy.datalayer.dto.inspection.InspectionHeaderDto;
import com.mingcloud.proxy.datalayer.entity.inspection.InspectionEntity;
import com.mingcloud.proxy.util.JdbcChange;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import java.util.Date;

public class InspectionDataOutThread implements Runnable {

    private static Logger logger = Logger.getLogger(InspectionDataOutThread.class);

    private JdbcChange jdbcChange = JdbcChange.getJdbcChange();

    private DataCenter dataCenter = DataCenter.getInstance();

    private InspectionMapper inspectionMapper = SpringContextUtil.getBean("inspectionMapper");

    private HumanMapper humanMapper = SpringContextUtil.getBean("humanMapper");

    @Override
    public void run() {
        
        logger.info("InspectionDataOutThread begin ...");
        //切换到Mysql数据源
        jdbcChange.changeJdbc(JdbcChange.mySqlDataSource);
        logger.info("InspectionDataOutThread change to mySqlDataSource");

        while (true) {
            try {
                if (dataCenter.getInspectionHeaderListSize() > 0) {
                    insertInspection();
                }
                Thread.sleep(50);
            } catch (Exception e) {
                logger.error("InspectionDataOutThread : " + e);
            }
        }

    }

    private void insertInspection(){
        InspectionHeaderDto dto = dataCenter.popInspectionHeaderList();

        InspectionEntity oldEntity = inspectionMapper.selectByInspectionKey(dto.getROUND_KEY());

        InspectionEntity newEntity = new InspectionEntity();
        newEntity.setInspectionkey(dto.getROUND_KEY());
        newEntity.setInspectionname(dto.getROUND_NAME());
        if (StringUtils.isNotBlank(dto.getTYPE())) {
            //巡检路线类型，I->1 巡检   L-> 2 润滑
            newEntity.setInspectiontypeid(InspectionTypeEnum.getTypeId(dto.getTYPE()));
        }

        String workSupplierKey = dto.getWORK_SUPPLIER_KEY();
        if(StringUtils.isNotBlank(workSupplierKey)){
            HumanDto humanDto = humanMapper.getByHumanKey(workSupplierKey);
            if(null != humanDto){
                newEntity.setHumanid(humanDto.getId());
            }
        }

        Date date = new Date();
        if(null != oldEntity){
            newEntity.setModificationdate(date);
            newEntity.setId(oldEntity.getId());
            inspectionMapper.update(newEntity);
            logger.info("InspectionDataOutThread update success");
        } else {
            newEntity.setCreatedate(date);
            inspectionMapper.insert(newEntity);
            logger.info("InspectionDataOutThread insert success");
        }
    }
}

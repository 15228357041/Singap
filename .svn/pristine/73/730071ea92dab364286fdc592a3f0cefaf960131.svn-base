package com.mingcloud.proxy.logiclayer.vcom_dayhander;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.CommonrecodeexMapper;
import com.mingcloud.proxy.datalayer.dao.archiveinfo.StatisticsdaliyMapper;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.StatisticsdaliyDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.StatisticsdaliyEntity;
import com.mingcloud.proxy.util.SpringContextUtil;
import org.apache.log4j.Logger;
import org.springframework.transaction.annotation.Transactional;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class VComDayDataOutThread implements Runnable {
	private static Logger logger = Logger.getLogger(VComDayDataOutThread.class);

	private CommonrecodeexMapper commonrecodeexMapper = 
			SpringContextUtil.getBean("commonrecodeexMapper");

	private StatisticsdaliyMapper statisticsdaliyMapper =
			SpringContextUtil.getBean("statisticsdaliyMapper");
	
	private DataCenter dataCenter = DataCenter.getInstance();

    SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");
    Date now =null;
    Date endTime = null;


	
	public void run() {
		while (true) {
			if (dataCenter.getVcomDaylistSize() > 0) {
				logger.info("VcomDayDataCenter size: " +dataCenter.getVcomDaylistSize());
				InsertStatisticsdaliy();
			}
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
				logger.error("VComDayDataOutThread: " + e);
			}
		}
	}
	
	@Transactional
	private void InsertStatisticsdaliy() {
		try {
            now = df.parse(df.format(new Date()));
            endTime=df.parse("23:59:59");
            if(now.getTime()==endTime.getTime()){
                StatisticsdaliyEntity paramEntity=new StatisticsdaliyEntity();
                statisticsdaliyMapper.delete(paramEntity);
            }

			logger.info("xyc datein");
			StatisticsdaliyDto dto = dataCenter.popVcomDaylist();
			logger.info("xyc dto:"+dto);
			StatisticsdaliyEntity statisticsdaliyEntity = new StatisticsdaliyEntity();
			statisticsdaliyEntity.setExtradatetime1(dto.getExtradatetime1());
			statisticsdaliyEntity.setNtype(dto.getNtype());
			statisticsdaliyEntity.setOrgid(dto.getOrgid());
			statisticsdaliyEntity.setExtraid1(dto.getExtraid1());

			statisticsdaliyEntity.setPoskey(dto.getPoskey());
			statisticsdaliyEntity.setPosabname(dto.getPosabname());
			statisticsdaliyEntity.setPosname(dto.getPosname());
			statisticsdaliyEntity.setExtradecimal2(dto.getExtradecimal2());
			statisticsdaliyEntity.setExtradecimal3(dto.getExtradecimal3());
			statisticsdaliyEntity.setExtradecimal4(dto.getExtradecimal4());
			List<StatisticsdaliyEntity> list = statisticsdaliyMapper.select(statisticsdaliyEntity);
			logger.info("xyc list:"+list);
			// value
			statisticsdaliyEntity.setExtradecimal1(dto.getExtradecimal1());
			statisticsdaliyEntity.setExtravarchar2(dto.getExtravarchar2());
			
			int type = dto.getNtype();
			
			if (list.size() > 0 && (type == 10 || type == 1 || type == 2 || type == 3 ||
					type == 4 || type == 8 || type == 9 || type == 10 || type == 13)) {
				for (int i = 0; i < list.size(); i++) {
					Integer id = list.get(i).getId();
					statisticsdaliyEntity.setId(id);
					statisticsdaliyEntity.setModificationdate(new Date());
					// 更新
					statisticsdaliyMapper.update(statisticsdaliyEntity);
					logger.info("Updating VcomDay data succeeded...");
				}
			} 
			if (list.size() == 0) {
				// 新增
				statisticsdaliyEntity.setCreatedate(new Date());
				statisticsdaliyMapper.insert(statisticsdaliyEntity);
				logger.info("Inserting VcomDay data succeeded...");
			}
		} catch (Exception e) {
			logger.error("VComDayDataOutThread.InsertCommonrecodeex: " + e);
		}
	}
}

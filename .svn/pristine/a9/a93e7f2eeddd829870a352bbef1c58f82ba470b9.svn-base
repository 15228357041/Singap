package com.mingcloud.proxy.logiclayer.beiqitransfer;

import com.mingcloud.proxy.datacenter.DataCenter;
import com.mingcloud.proxy.datacenter.SIFATransferData;
import com.mingcloud.proxy.datalayer.dto.archiveinfo.CommonrecodeexDto;
import com.mingcloud.proxy.datalayer.entity.archiveinfo.SIFATransferEntity;
import com.mingcloud.proxy.logiclayer.beiqitransfer.webservice.DTFATransferREQ;
import com.mingcloud.proxy.logiclayer.beiqitransfer.webservice.DTFATransferRES;
import com.mingcloud.proxy.logiclayer.beiqitransfer.webservice.SIFATransferOutEAM2SAPSYN;
import com.mingcloud.proxy.logiclayer.beiqitransfer.webservice.SIFATransferOutEAM2SAPSYNService;
import org.apache.log4j.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;



/**
 * @author ShenXD
 */
public class BeiqiTransferDataInThread implements Runnable {
	private static Logger logger = Logger.getLogger(BeiqiTransferDataInThread.class);

	private static final QName SERVICE_NAME = new QName("http://eam.baicmotor.com",
			"SI_FATransfer_Out_EAM2SAP_SYNService");

	private DataCenter dataCenter = DataCenter.getInstance();
	
	private SimpleDateFormat  sdf = new SimpleDateFormat ("yyyyMMdd");

	private static SIFATransferData sIFATransferData = SIFATransferData.getInstance();

	public void run() {
		while (true) {
			try {
				if (dataCenter.getWeatherCommonrecodeexlistSize() <= 100) {
					logger.info("BeiqiDataInThread running...");
					GetAllSIFATransferData();
					logger.info("BeiqiDataInThread wait for 5 minutes...");
					Thread.sleep(5 * 60 * 1000);
				} else {
					logger.info("BeiqiDataInThread wait for 5 minutes...");
					Thread.sleep(5 * 60 * 1000);
				}
			} catch (InterruptedException e) {
				logger.error("BeiqiDataInThread: " + e);
			}
		}
	}

	public void GetAllSIFATransferData() {
		try {
			sIFATransferData.resetSIFATransferList();

			List<SIFATransferEntity> siList = sIFATransferData.getSIFATransferList();

			SIFATransferOutEAM2SAPSYNService ss = new SIFATransferOutEAM2SAPSYNService(
					SIFATransferOutEAM2SAPSYNService.WSDL_LOCATION, SERVICE_NAME);

			SIFATransferOutEAM2SAPSYN port = ss.getHTTPPort();
			logger.info("Invoking siFADisposeOutEAM2SAPSYN...");

			((BindingProvider) port).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, "SAP_MES_ZZ2");
			((BindingProvider) port).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "Sap123456");

			DTFATransferREQ mt = new DTFATransferREQ();
			
			List<DTFATransferREQ.FATransferREQ> mtList = mt.getFATransferREQ();

			for (SIFATransferEntity entity : siList) {
				DTFATransferREQ.FATransferREQ mtEntity = new DTFATransferREQ.FATransferREQ();
				mtEntity.setANLABUKRS(checkInParameter(entity.getExtravarchar20()));//公司代码
				mtEntity.setANLAANLN1(checkInParameter(entity.getAssetkey()));//资产编号
				mtEntity.setSYDATUM(checkInParameter(sdf.format(new Date())));
				mtList.add(mtEntity);
			}

			DTFATransferRES mtResult = port.siFATransferOutEAM2SAPSYN(mt);
			
			if(mtResult==null) {
				logger.info("BeiqiDataInThread.NoResultGet...");
				return;
			}

			List<DTFATransferRES.FATransferRES> mtResultList = mtResult.getFATransferRES();

			for (DTFATransferRES.FATransferRES entit : mtResultList) {
				System.out.println("resultEntity:"+entit.toString());
				CommonrecodeexDto curdto = new CommonrecodeexDto();
				curdto.setExtravarchar1(checkOutParameter(entit.getANLABUKRS())); // 公司代码
				curdto.setExtravarchar2(checkOutParameter(entit.getANLAANLN1())); // 资产编号
				curdto.setExtravarchar3(checkOutParameter(entit.getANLZKOSTL())); // 新的成本中心代码
				curdto.setExtravarchar4(checkOutParameter(entit.getSYDATUM())); // 更改日期
				
				if (checkOutParameter(entit.getSYDATUM())==null && checkOutParameter(entit.getANLZKOSTL())==null) {
					logger.info("BeiqiDataInThread.UselessData...");
					continue;
				}
				dataCenter.pushWeatherCommonrecodeexlist(curdto);
				logger.info("BeiqiDataInThread.GetBeiqiDataSucceeded...");
			}
		} catch (Exception e) {
			logger.error("BeiqiDataInThread.GetAllPositionData(): " + e);
		}
	}

	private String checkInParameter(String parameter) {
		return parameter == null ? "?" : parameter;
	}

	private String checkOutParameter(String parameter) {
		return parameter == "<null>" ? null : parameter;
	}
}
